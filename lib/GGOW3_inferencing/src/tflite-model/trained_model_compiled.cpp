/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 08.07.2022 22:18:22

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 63456;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[17];
TfLiteEvalTensor tflEvalTensors[17];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[8];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,6240 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0032620930578559637, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 96, 65, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data2[2] = { -1, 6528, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data3[8*3*3*1] = { 
  /* [0][0][][] */ 57, 73, -91, 
  /* [0][1][][] */ 78, -8, -127, 
  /* [0][2][][] */ 49, 62, -53, 
  /* [1][0][][] */ -72, -92, -15, 
  /* [1][1][][] */ -97, -67, 17, 
  /* [1][2][][] */ -89, -127, -78, 
  /* [2][0][][] */ -114, -105, 23, 
  /* [2][1][][] */ -72, -76, -64, 
  /* [2][2][][] */ -127, 23, -41, 
  /* [3][0][][] */ 54, 108, 80, 
  /* [3][1][][] */ 86, 46, 109, 
  /* [3][2][][] */ 105, 55, 127, 
  /* [4][0][][] */ 92, 48, -38, 
  /* [4][1][][] */ 127, -10, 10, 
  /* [4][2][][] */ 124, -3, -80, 
  /* [5][0][][] */ 84, 18, 122, 
  /* [5][1][][] */ 43, 10, 127, 
  /* [5][2][][] */ 38, -7, 98, 
  /* [6][0][][] */ -127, -52, -22, 
  /* [6][1][][] */ -75, -41, -40, 
  /* [6][2][][] */ -56, -39, -22, 
  /* [7][0][][] */ -77, -63, -58, 
  /* [7][1][][] */ -8, -68, -10, 
  /* [7][2][][] */ -116, -48, -127, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant3_scale = { 8, { 0.0036131131928414106, 0.0032465353142470121, 0.0033879103139042854, 0.0025141777005046606, 0.0037396820262074471, 0.0036534871906042099, 0.0048386417329311371, 0.0037503056228160858, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[8] = { -9767, -2921, -492, -8043, -16382, -29811, -321, 5374, };
const TfArray<1, int> tensor_dimension4 = { 1, { 8 } };
const TfArray<8, float> quant4_scale = { 8, { 1.1786311915784609e-05, 1.0590500096441247e-05, 1.1051678484363947e-05, 8.2014812505804002e-06, 1.2199190678074956e-05, 1.1918014934053645e-05, 1.5784100469318219e-05, 1.2233846064191312e-05, } };
const TfArray<8, int> quant4_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[16*3*3*8] = { 
  /* [0][0][][] */ -87,-60,-67,16,-36,-80,-67,-127, 24,-93,-105,30,38,9,-99,-71, 40,-43,-20,34,39,-33,-29,-35, 
  /* [0][1][][] */ -9,-56,-26,-1,-29,-55,-83,4, 2,-87,-26,21,9,-6,-29,-62, -46,-26,-63,-14,-7,22,-58,-14, 
  /* [0][2][][] */ 0,-28,-83,3,-8,-87,-69,-59, 45,-60,-29,22,43,-27,-106,-51, 28,-42,-48,44,3,54,-39,-5, 
  /* [1][0][][] */ -89,-21,-95,-127,-13,-35,-8,-44, -87,-95,-66,0,-89,-9,-31,-14, 62,3,-26,24,22,-68,-85,-16, 
  /* [1][1][][] */ 46,-127,-32,21,-7,-13,-45,-13, -53,4,41,-35,6,-66,-116,-51, -79,-88,-3,-36,-70,-58,10,-6, 
  /* [1][2][][] */ 47,-42,9,52,-73,-40,-77,-83, -68,40,-49,-93,-65,-120,-63,15, -99,1,-11,3,-15,-39,32,-41, 
  /* [2][0][][] */ -12,-30,-73,-23,-30,92,-49,-56, 17,-27,-41,50,-20,-49,-19,-38, -89,-34,-46,-62,-9,-127,-24,-49, 
  /* [2][1][][] */ 12,-5,-13,25,25,41,-40,12, -19,-50,-61,-37,35,25,-46,0, 2,-28,1,15,-1,-51,-37,22, 
  /* [2][2][][] */ -37,-48,9,41,-36,70,1,-82, 27,-57,-52,43,15,8,-3,-53, 34,-8,-63,-14,-52,-33,-21,32, 
  /* [3][0][][] */ -61,0,-3,44,-93,127,-70,18, 0,-11,-29,49,25,18,-43,-81, 0,5,-30,-27,-25,-60,-4,0, 
  /* [3][1][][] */ -40,19,-47,67,-64,23,8,11, 10,-14,3,-12,10,-1,-9,-71, 9,15,-19,5,-28,-23,-72,3, 
  /* [3][2][][] */ -49,18,3,61,-97,78,25,-67, 15,-37,-8,46,65,17,-19,-94, 3,-18,-26,15,-6,-11,-26,-22, 
  /* [4][0][][] */ 10,-44,-19,-87,-1,-95,-52,-73, -106,-54,-17,10,-123,105,44,78, 54,-79,27,60,101,40,-87,-119, 
  /* [4][1][][] */ -39,-54,-88,-82,-39,-22,-102,-109, -92,-37,-75,-82,-75,127,-95,-41, 55,-88,-66,10,41,-16,-86,-105, 
  /* [4][2][][] */ -76,-67,-72,-99,-76,-22,-18,-98, -26,-34,45,80,-123,-37,-63,-13, 62,33,-25,14,108,-48,-76,-24, 
  /* [5][0][][] */ -67,-100,-72,-42,-6,9,-50,8, -115,-66,-91,-85,38,67,-91,-48, -8,-42,-9,-76,29,52,-105,18, 
  /* [5][1][][] */ -107,-56,-27,-77,-127,-52,-69,-12, 14,-72,-30,-110,-33,-122,-72,-125, -8,25,-30,10,-40,-21,13,45, 
  /* [5][2][][] */ -96,-84,-39,-8,-122,78,-114,-41, -96,4,-14,-61,41,34,20,-58, -72,-76,12,0,-5,28,12,-36, 
  /* [6][0][][] */ -53,-43,-9,-76,-50,-75,-72,-56, 49,-81,-12,-85,-119,59,27,-118, -46,-5,-46,4,94,-86,-34,-107, 
  /* [6][1][][] */ -39,12,-45,-23,-114,-14,4,-34, -15,5,-67,9,-12,9,-37,-22, 34,-75,-39,56,56,2,-17,-113, 
  /* [6][2][][] */ -44,-3,-26,-54,-44,-69,28,14, -22,-28,-28,15,-127,77,-34,-34, 47,11,-68,-15,73,23,-1,-2, 
  /* [7][0][][] */ -90,-116,-21,17,-41,38,-70,-29, -23,-56,-76,24,71,26,-62,-92, -26,-94,-127,33,59,-70,-32,-26, 
  /* [7][1][][] */ -21,-62,-61,-14,-26,94,-43,-86, 71,-66,25,78,22,-9,-60,-89, -10,-38,-35,31,1,33,3,-55, 
  /* [7][2][][] */ -5,-5,20,-34,-33,-82,-77,-43, -37,-75,-3,77,13,-11,-90,-30, 34,-70,-2,-101,-33,-33,12,-34, 
  /* [8][0][][] */ -86,-88,22,-60,-57,-39,-23,59, -56,-73,-127,29,18,7,12,24, -51,-115,-2,-120,-39,-79,38,-2, 
  /* [8][1][][] */ -79,-109,-68,-81,10,-86,-28,1, -2,-44,-43,-52,6,16,-66,4, -64,17,-81,7,-76,-33,11,-31, 
  /* [8][2][][] */ -43,-70,-104,27,-93,-91,-26,-25, -65,-12,-27,-100,-100,-74,-97,-94, -74,-44,-88,-67,-81,-63,-92,-94, 
  /* [9][0][][] */ -45,-21,-14,-22,-19,127,-57,-12, 0,15,27,4,35,20,-6,-68, -23,9,36,16,-10,-10,-23,-16, 
  /* [9][1][][] */ -36,12,-15,83,-7,51,11,-47, 36,-22,-21,18,47,58,-14,-41, 3,11,-15,16,10,18,-77,-12, 
  /* [9][2][][] */ -12,-12,-10,10,-11,61,30,26, -8,-63,-46,45,23,48,-12,-56, 23,-35,-43,-1,-12,-49,-32,-41, 
  /* [10][0][][] */ -37,-14,25,-56,-50,-118,-83,38, 26,-69,-20,-12,24,5,60,-110, -1,-39,-52,-109,-59,-56,22,-85, 
  /* [10][1][][] */ 17,-21,-3,18,-94,-55,-104,-59, 9,-127,-67,-32,-30,-80,-122,-25, -126,-18,5,-98,4,-77,-68,31, 
  /* [10][2][][] */ -59,-92,-81,42,3,-18,-11,-37, 9,-92,37,-34,-100,-19,-73,-75, 7,11,26,-103,-86,-104,-98,-118, 
  /* [11][0][][] */ -16,-83,-35,27,-82,-73,-6,-31, -58,10,22,-85,-63,-60,-18,19, 11,-10,-73,39,34,-127,14,-22, 
  /* [11][1][][] */ -61,0,-49,0,-51,43,-26,-34, -53,-51,32,-24,-43,-26,-15,-90, 0,-67,-46,-77,-37,-30,-2,-9, 
  /* [11][2][][] */ -90,-93,-46,15,20,10,-17,-92, -83,-16,-21,-41,-58,-62,-56,-52, -90,-24,7,-15,-17,-84,1,-47, 
  /* [12][0][][] */ 18,-59,-127,-75,-9,49,17,-79, -48,-68,29,-37,50,-79,15,-16, -13,10,-56,-78,-27,15,-36,-14, 
  /* [12][1][][] */ -77,59,-9,-5,-18,61,-95,-50, -6,-44,2,-109,-38,1,-114,-57, 34,-40,-120,-1,-45,-102,-70,-29, 
  /* [12][2][][] */ -49,-60,43,-38,-42,-56,-78,56, -37,-47,-42,-21,-94,-109,-48,-103, -94,27,-47,24,-91,-101,-79,-75, 
  /* [13][0][][] */ -33,24,-82,8,-90,-61,-32,-127, -77,-80,-13,-61,2,-38,-113,-78, -61,-65,-81,-21,-57,6,19,-81, 
  /* [13][1][][] */ -8,-117,24,-37,-51,-13,1,2, -88,3,-34,-77,-28,13,-78,-26, 5,-68,-14,-65,-58,-31,-14,3, 
  /* [13][2][][] */ -10,-50,-19,-49,-46,-4,65,-102, -21,-105,-49,-61,1,-21,3,-75, -104,-49,4,-50,25,15,-34,-42, 
  /* [14][0][][] */ -114,-43,9,-103,-115,-30,6,-111, -81,-6,24,-35,-33,-80,32,11, 23,13,-1,-37,-35,-77,9,11, 
  /* [14][1][][] */ -111,-15,-24,-127,-85,-78,-24,-96, -67,18,23,-84,-97,-82,-6,0, 16,-5,-12,-24,22,-92,15,20, 
  /* [14][2][][] */ -53,-34,-29,-40,-88,-107,-30,-4, -31,26,22,-84,-18,-116,38,48, 21,26,16,-62,-7,-28,-15,-23, 
  /* [15][0][][] */ 38,-21,-49,23,-72,-122,-102,-68, -51,-20,-49,-116,28,11,59,-35, 21,-102,2,-102,-66,-7,-92,-39, 
  /* [15][1][][] */ -40,-6,-13,-110,-84,-65,-22,-61, -25,-10,-64,-74,-64,-1,-28,11, -32,-86,-18,-80,-62,22,16,-45, 
  /* [15][2][][] */ -109,-37,-25,-11,-8,-31,-127,-9, 37,1,43,-63,2,-46,-66,-88, 20,-69,-88,-52,-62,22,14,21, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant5_scale = { 16, { 0.004858226515352726, 0.0023949057795107365, 0.0047962660901248455, 0.005467692855745554, 0.0041298004798591137, 0.0033382386900484562, 0.004133936483412981, 0.0038081349339336157, 0.0023438972420990467, 0.0058910311199724674, 0.001923299627378583, 0.0025987522676587105, 0.0021438188850879669, 0.0027796430513262749, 0.0059518460184335709, 0.0017533813370391726, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[16] = { 8172, -8845, -1507, -8314, -10519, -13104, -2664, 2490, -8912, -11981, -8082, -6623, -8410, -8917, 2837, -8199, };
const TfArray<1, int> tensor_dimension6 = { 1, { 16 } };
const TfArray<16, float> quant6_scale = { 16, { 2.5449568056501448e-05, 1.2545589925139211e-05, 2.5124991225311533e-05, 2.8642225515795872e-05, 2.1633746655425057e-05, 1.7487191144027747e-05, 2.1655412638210692e-05, 1.9948718545492738e-05, 1.2278384019737132e-05, 3.0859860999044031e-05, 1.007510581985116e-05, 1.361342947348021e-05, 1.1230284144403413e-05, 1.4561016541847493e-05, 3.1178438803181052e-05, 9.1849969976465218e-06, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[2*6528] = { 
  -19, -2, -18, -19, -44, 18, -51, -33, 3, -63, -3, -10, -11, -3, 25, -1, -38, -8, -60, -82, -3, 0, -5, -80, 5, -84, 9, -3, 4, 18, 21, 0, -26, -5, -39, -40, -22, -14, -42, -15, 15, -91, -3, -4, -11, 1, 15, -2, -17, -14, -34, -6, -11, 0, -32, -33, -1, -61, 5, -1, 1, 4, -30, -1, -39, 4, 2, 11, -4, -16, -35, -18, 0, -29, -5, 10, -11, 2, -3, -1, -5, -3, -19, -25, 8, 5, -8, -28, -1, -14, -10, -5, 4, -10, 12, 0, -22, 1, -20, -35, 22, -12, 7, -9, -4, -20, 9, -1, -9, 16, -14, -2, -17, 9, -27, 0, -20, 1, 26, -14, -3, 3, -6, -1, -6, 5, -2, 2, -3, -3, 0, -16, -48, -2, 0, -16, 13, 5, 1, -4, -3, 0, -1, 2, 15, -15, 1, -4, 6, -1, -28, -1, -4, -28, -3, -3, 2, -5, 0, -5, -6, 0, -12, -1, 16, -5, -14, -10, -6, -14, -4, -1, -13, 1, 13, -2, 1, 3, -3, -2, -19, 5, 20, -6, 9, 9, -5, 5, -1, -13, -10, -3, -2, -2, 0, -5, 10, 8, -35, 1, 5, -7, -4, -3, -1, 2, 7, 2, 18, -6, -8, -6, -19, 0, 7, -15, -5, -14, -2, -3, -1, -3, 0, 4, -11, -7, -4, 3, -17, -4, 0, -2, 0, 5, -9, 3, 3, 11, -6, 1, 19, -2, 5, -1, -18, -10, 2, -5, 9, 10, -3, -4, -5, -3, -20, -4, -12, 0, -4, 4, -5, -7, 22, 4, -3, 18, -6, -2, -1, -4, -4, -5, -21, 7, -5, 19, 2, 6, 2, -6, -4, -9, 3, 2, 11, -3, 19, 5, -31, -9, -30, -40, -28, -25, -39, -41, -1, -32, 2, 4, -3, -3, 9, 0, -24, 7, -9, -28, -23, 1, 10, -9, -8, -47, -5, 2, -1, 0, 17, -1, -13, -3, -38, -29, -28, 4, -21, -42, 4, -31, -1, -1, -6, 0, 3, -6, -20, -5, -6, -17, -77, 5, 16, 2, 0, -35, 1, -1, -7, 0, 1, -3, 12, -1, -12, -17, 13, -9, -14, -23, -2, -27, 3, -1, -5, 13, -33, -1, -18, -7, 7, -8, -16, -4, 0, -25, -1, -30, -5, 1, 4, 0, -15, 1, -14, 7, -26, -16, -14, 6, -25, -3, -1, -4, 2, 0, 4, -1, -13, -1, 5, 6, 8, -24, -20, 1, -3, 7, 4, -2, 1, -5, 6, -7, -6, -3, 17, 0, -2, -18, -20, -2, -4, 19, 5, -9, 4, -1, 2, 8, -20, -2, 25, 6, 1, 4, -8, -10, 4, 13, -6, -11, -4, 3, -2, -5, -29, 0, -1, 1, -1, 10, -15, 0, -1, -30, 6, 6, 8, 0, -17, 9, -5, 2, 9, -4, -5, -20, 1, -2, 4, -19, 5, -7, 3, -4, 1, -2, -15, -5, -2, -1, 12, -7, -8, -8, -5, 7, 8, -5, -6, -5, -4, -3, -52, -3, 26, -2, -17, -7, -3, -6, 4, 18, 0, -4, -3, -2, 10, 0, 6, -1, -11, -7, -17, -4, -3, 8, -19, 18, -6, -24, 3, -2, -6, -12, 4, 0, -28, -9, -28, -16, 5, -2, 0, -9, 3, -20, 0, -8, -5, 7, -2, 0, -17, -14, 18, 28, 16, -3, 23, 15, 3, 17, -2, -5, 8, -3, 6, 0, -18, 12, -2, -35, 2, -18, -34, -42, 1, -5, -1, 14, 10, 2, -3, -2, -13, -8, -22, -41, -17, -20, -7, -32, -1, -28, -2, 0, 12, -6, 4, -4, -24, 3, 10, -31, -20, 8, 3, -13, -7, -6, -6, -4, 8, -2, -20, -6, 10, -14, -16, -9, -26, -16, -26, -30, 7, -13, -2, 9, -5, 2, -13, -1, -17, -4, -23, 2, -13, -1, 0, 5, -15, -3, 3, -5, 7, -5, 11, -3, -23, -4, -26, -27, -8, -26, -15, -32, 5, -12, -8, -4, -2, 0, -3, -7, -13, -8, -35, 5, -2, 0, 8, -8, 1, -31, 4, -2, -3, -8, -32, -4, 26, -2, -17, 12, -24, -2, 10, -9, 5, 11, -4, -2, -2, -3, -5, -5, -13, 1, -3, 1, 27, -21, -18, 12, 1, -1, -4, -4, -11, -4, -5, -7, 14, 6, 12, 3, 24, 7, 15, -6, 1, -2, 4, -1, 3, -10, 14, 0, 11, -7, -1, -9, -11, -6, -10, 4, -3, -2, 1, 2, -10, 0, -14, 0, -27, -4, 8, 6, -6, 1, 15, -14, 1, -15, -6, -4, 1, 6, -24, -3, -7, -6, 13, -8, -15, -18, -8, 4, -2, -4, -5, -5, -5, -5, -5, -4, -18, -11, -15, -27, -12, -4, -23, 24, 10, -11, 0, -1, 0, -2, 6, -2, 15, -6, 16, 19, 28, -3, -11, -21, -5, -3, -3, 1, -4, -1, -6, -1, -18, -5, -13, 8, -9, 5, -9, -8, -6, 28, -17, -1, 10, 6, 3, -1, -11, 0, 21, 41, 30, 9, 12, 10, -3, 18, 6, -5, 14, -1, 6, -6, -5, 8, 5, -21, -18, 2, -52, 10, -7, -3, 5, -5, -2, -6, 29, -1, 6, -13, -13, -13, -38, -15, -7, -33, -6, 21, -1, -2, 8, -6, -9, -1, -13, -17, -19, -10, -41, 10, 5, 7, 0, 1, 5, 6, -1, -4, -1, 0, -12, -3, -26, -22, -27, -4, -28, 16, 10, -30, -2, -2, -1, -6, -11, 1, -23, -22, -27, -25, -1, 9, 7, -16, 18, -26, -1, -3, -7, 1, -2, 2, 1, 7, -8, 5, 10, 0, -17, -25, -4, -31, 1, 2, -5, -5, 11, 0, 6, -6, 3, 0, -25, 0, 16, -7, -1, -27, 0, -6, 0, 1, -4, 2, 25, 4, 6, 2, 3, 15, -6, -12, -2, 18, -5, -2, -9, -8, -2, -3, -3, -1, -7, -1, 5, 0, 12, 18, -1, 5, -3, 2, -6, -4, -7, -3, 8, 12, 26, 5, 11, 9, -16, 15, 4, -8, -4, 0, -5, 3, 10, -1, -3, 3, -22, -6, -8, -2, 13, 1, 4, -12, 5, -1, -5, -20, -21, 3, -13, -3, -15, -8, 16, -3, -7, -18, -8, 5, 0, -7, -10, -5, -15, -4, 21, 3, -15, 9, -4, -8, -8, 25, 8, -13, 3, -1, -2, 15, -3, -2, -13, -5, 24, 5, -32, 4, 6, 11, 8, 15, 1, -4, -7, -5, 2, -2, 21, 0, -6, 13, 12, 5, 4, 10, 4, 25, 0, -1, 15, 0, 4, -4, 1, -2, 33, 16, -1, 6, 2, -8, 3, -21, 6, 0, -11, 16, -12, -4, 0, 11, 42, 42, 57, 18, 25, 8, -9, 30, -1, 10, -8, -1, 1, 2, 21, 7, 12, -4, -29, -9, -20, -14, 0, 15, 0, -11, -15, 2, -14, -8, -29, -26, -8, -23, 12, 5, -37, 11, 5, -19, -2, -10, 6, -2, 14, -1, -29, -6, 12, 5, -14, -15, -26, -36, 1, -43, 0, 0, -2, 2, -6, 2, -30, -9, -43, -15, -6, -15, -16, -23, 1, -37, -3, 5, 0, 26, 22, -4, -16, 13, -42, -16, 1, -5, -10, -13, 4, 1, -1, -1, -4, 8, 1, -5, -4, -9, -3, -35, -8, -12, 6, -18, 5, -27, 1, -2, -3, -3, 7, -4, -29, -3, -32, -37, -23, 1, -31, -33, 6, 3, -4, 1, -14, -12, 23, 2, 19, 16, 6, 5, 10, 7, -20, 18, 11, 43, -7, 2, 1, -5, -24, 1, 4, -7, 19, 4, 20, 1, -8, 5, 0, -12, 0, -2, 2, -1, -2, -2, -1, 14, 10, 16, -21, -4, 3, 19, 9, 5, -4, -4, 1, -3, -20, -2, 18, -7, 14, 3, 25, 11, 6, 1, 5, 27, -3, 7, 6, -5, -1, -7, -21, -4, 30, -12, 19, -4, 4, 15, -7, 13, 4, 5, -7, 10, 35, -5, 6, -2, -4, 21, -34, -2, 10, 1, -6, -38, 4, 2, -2, -8, -3, -2, 16, -6, 9, 28, -2, 2, 15, 17, -2, -12, -3, 0, 6, -1, 12, 0, 3, 2, 27, 19, 9, -5, 22, 18, -3, 10, 14, -6, -2, -3, -15, -4, -4, -11, 12, 23, -6, -7, 1, 23, 4, 7, -11, -2, -8, -11, -14, -3, 12, -7, 20, 64, 54, 4, 19, 21, 0, 11, 6, 7, 1, -2, -42, -4, 6, 11, 33, -4, -12, 1, -25, -8, 2, -1, 1, 2, -1, -6, -18, -3, -33, 1, 15, -2, -46, 9, -14, 5, -7, -10, 0, -1, -15, 0, -12, 2, -17, -4, -29, -6, -42, 2, -29, -17, -2, 4, -4, -3, 2, 10, 12, -4, 9, -3, -13, -20, -19, -5, -8, -12, -2, -37, -4, -1, -6, 7, -4, 1, -9, -7, -15, -20, -37, -3, 3, -11, -7, 17, 2, -4, -11, 1, 8, 0, -5, -15, -27, -51, 21, -1, 4, -16, -4, 23, -5, -1, 5, -3, -8, -1, 6, 6, 3, -7, -24, 0, -15, -3, 0, -1, -2, 3, -8, -6, 19, -3, -3, -2, 3, -2, 7, 8, 27, -26, -4, 23, -6, 2, 5, -1, -12, -4, 10, 3, 13, 19, -8, -10, -23, 50, -3, -21, -1, 4, -9, -18, -1, -14, 10, 2, -5, 24, 16, -13, 1, -1, -6, -7, -2, -4, -1, -2, 9, -8, 10, 2, -10, 24, 6, 1, -8, 5, -3, -19, -8, 0, 0, -9, -17, -1, -8, 10, -4, 4, -15, 0, 22, 19, -1, 17, -4, 5, 2, -2, -9, -2, 8, 5, 23, 36, 2, -7, 11, 10, -3, 27, -4, 0, 1, -6, -8, -6, -2, 5, 16, -7, 25, 2, -15, 33, -4, 16, -3, 4, -13, -2, -44, -3, 38, -4, 8, 11, 9, 16, 8, 14, -10, 6, -7, -5, 4, -5, -8, -5, 25, 5, 20, 12, -6, 9, -1, 4, 3, 21, -2, 1, 3, 13, 10, 0, 26, 15, 22, 64, 37, 20, 52, 32, -6, 10, 6, 21, -11, -6, -58, -3, 9, 13, 11, -3, 11, 20, -3, 22, -6, -9, -5, -2, -3, -2, -10, -4, -12, -7, -7, -2, -34, -20, -8, 3, 2, 20, 7, -1, 5, 2, 7, -4, -13, -9, 7, -1, 3, 0, -5, -3, 11, -35, -7, -6, -5, -6, 18, 4, -27, 2, -24, -4, 17, -12, -2, -12, 1, 2, -4, 2, 5, -1, -13, -6, 27, 1, -13, 0, -35, 12, -6, 14, -4, -7, -2, -2, 2, 10, 14, 0, -15, -9, 9, -28, 29, -1, -13, -6, 4, 7, -4, -4, -6, -4, 11, -2, -8, 5, -2, -4, -17, 15, 0, -29, -1, 21, -5, 0, 6, -7, 9, -4, -6, 3, 5, 10, -23, 11, -19, 5, 1, 9, -3, -1, -7, -6, -7, -2, 17, -7, 1, -23, 8, -3, 4, 59, -4, 13, -2, -8, 2, 1, -10, -3, 27, -3, 20, 11, 15, 12, -2, 17, 1, 5, -3, -5, 1, -6, -6, -7, 17, 0, 13, 6, 19, -3, -22, 15, -1, 24, -7, -5, 3, -1, 1, -3, 28, -1, -1, -11, 31, 4, 39, 3, -6, 21, -3, -2, 7, -8, -6, -5, -5, -3, 4, -13, 7, 18, 2, 6, 1, 9, -5, 2, -3, -1, -18, -3, 11, -3, 33, 10, 19, 20, -1, 10, 0, 33, 2, -2, -5, -8, -7, -7, 31, 9, 31, 29, 14, 5, -15, 15, 1, 28, -1, -3, 10, -3, 0, -4, -10, -30, 20, -13, 0, 1, 8, 1, 5, 18, 3, -2, 8, -23, 21, 0, 29, 0, 37, 52, 31, -7, 26, 28, 0, 35, 1, 15, 11, -3, -51, -7, 5, 18, 6, 9, -1, 14, -11, 3, 0, 27, 3, -4, 3, 1, -36, 1, -10, -4, -28, -17, -7, 19, 9, -37, 0, -5, 2, -2, -1, 5, 14, 0, -18, -8, -11, -9, -4, 16, 14, 4, -3, 7, -5, -14, -2, -9, 6, -2, -5, -2, -16, -21, 12, 21, -32, -23, 0, -5, -3, 0, -5, -4, -11, -6, -36, -7, -15, -15, -13, 7, 8, -11, -2, 8, -1, -2, -9, -3, 2, -2, -35, -1, -19, -21, -1, 10, -6, 16, 5, 12, -5, 2, 9, 8, 0, -1, -17, 11, -11, 20, -27, 20, -36, 1, -4, 26, -4, -3, 1, 9, 3, -1, -4, -6, -7, -4, -32, 18, -31, -15, 17, -11, -2, 3, -6, 5, -15, 0, -15, -16, 10, -10, -11, 18, -18, -9, -2, 9, -4, -1, 6, -6, -3, -6, -2, -3, 3, 40, 4, -5, -1, 13, -6, 11, -5, 2, -6, -2, -13, -5, -4, 0, 10, 0, -11, 17, -5, -11, 4, 14, -13, -7, -6, -5, 9, -4, 20, 13, 5, 2, 30, 22, -7, 7, 0, 13, -2, -1, -2, -13, -21, -8, 20, -1, 38, 15, -35, -5, -7, 10, -8, 34, -1, -1, -2, 3, -31, -1, 9, -7, 23, 8, -26, -9, -12, 26, -4, 23, 3, 0, -11, 4, 5, -4, 29, 6, 25, 31, 15, 19, 26, 0, 3, 2, -5, 2, -15, -11, -17, -4, 9, -15, 15, -9, -6, 11, 6, 21, -1, 7, -2, -5, -1, -7, 6, -4, 33, 11, 46, 41, 32, 44, 41, 30, 1, 35, -4, 10, 2, -15, -45, -6, -3, 14, 17, -1, -18, 32, -19, 0, 4, 12, 0, 1, -5, 0, -3, -7, -30, 3, -18, -1, -14, 4, -5, 8, -2, -33, -4, 1, 0, 13, 27, -2, -10, 13, -13, -6, -23, 7, -26, -30, 2, -35, 0, -18, -3, -5, 2, -4, -20, 0, -30, -16, -39, 5, -34, -16, -3, 3, 4, 6, 3, -11, -21, -4, -5, -10, -8, -17, -11, 16, -28, -44, -2, -16, -3, -6, 2, -5, 5, 2, -23, -6, -12, -17, -24, 15, -6, -1, -4, -18, 0, 2, 1, -8, 32, -1, -20, -6, 6, 6, -23, 26, -5, -31, -1, -2, -3, 0, 3, -3, 3, -5, -10, -4, -22, -12, 8, 17, -4, 1, 3, 0, -3, 4, -10, -11, 3, 0, -20, -1, 0, -12, -23, 20, -9, 3, 0, -11, -3, 4, 0, -3, 0, -1, 3, 0, -3, 8, 0, 11, 2, -14, -4, 0, -1, 0, -1, -7, 8, 2, 19, 9, 11, -16, -27, 3, -4, 10, -3, 23, 1, 3, 9, -5, -5, -5, 1, 10, 11, 9, -18, 5, 2, 6, -4, -3, -6, 1, 14, -2, -3, -4, 19, -11, -17, 3, -20, 33, -1, 24, -2, -1, -5, -2, 0, -10, -25, -6, 37, -2, 12, -12, -16, 6, -1, 14, 6, 4, 2, 0, 2, 13, -7, 0, 29, -1, 9, 21, -17, 23, 19, -21, 3, -14, -4, -1, -12, -18, -1, 0, 32, 1, 16, 7, 0, 4, -4, 26, 2, -3, -2, 0, 1, 7, -23, 0, 21, 6, 22, 28, 15, 34, 33, 9, 11, 20, -2, 18, -1, -4, 47, -3, -6, 9, 6, 19, -19, 39, -32, 22, -5, 13, 0, -1, 4, -3, 4, -7, -1, 0, -24, -18, -45, 0, -21, 6, 6, 1, -2, -9, -3, -4, 8, 1, -32, 2, -12, -35, -35, -28, -24, -39, -2, -41, 5, -5, -7, -6, 16, -3, -15, 12, -32, 7, -36, -11, -23, 16, -2, 6, -1, 9, -8, 9, -28, -1, -14, -9, 2, 10, 6, -5, 10, -26, -2, 1, -3, 8, -2, -6, 2, -1, 15, -2, -13, -19, 0, 11, 12, 16, 3, 3, -3, -7, 7, -9, -6, -2, 11, 14, -3, -4, -17, 4, -17, 12, 1, -27, -6, -6, 0, 6, -3, -2, 14, -3, 1, -5, -30, 13, -13, 23, -3, -5, -1, -2, 3, 3, -10, 3, 22, -3, -14, 32, -2, 2, 24, -2, 0, -25, -2, -3, -5, 0, -28, 0, 8, 4, 29, -4, -32, 13, -6, 4, -5, 2, -9, 1, -4, -7, -6, -6, -9, 3, 3, -21, 30, 2, 10, -8, 0, 0, -1, -2, 10, 2, -20, -4, -6, 1, 8, -4, 14, 49, -3, -5, 8, 1, -2, 5, -3, 4, 8, -2, 19, 10, -7, 7, -28, 9, -17, 1, 2, -2, 2, 2, -2, -9, -30, -1, -9, 7, -11, 0, -8, -5, -1, -18, 6, 3, -2, -3, 6, -5, -4, -6, 5, 0, 12, 17, -1, 24, -10, 6, 7, 23, 0, -5, -7, -8, -20, 2, 17, -2, 24, 24, -3, 1, 0, 13, -4, 10, -2, 4, -9, 5, -24, 2, 12, -4, 26, 19, 25, -15, 1, 26, -4, 35, 5, 7, 8, -3, 37, 1, -25, 0, -3, 22, -30, 2, -3, -2, -2, 32, -5, 11, -6, -2, 10, -2, -21, -7, 3, 6, -56, -21, -23, -8, 1, -32, -6, -8, 1, 14, 34, -4, -15, 13, -15, -13, -47, 12, -15, 14, -2, 22, 2, -1, -6, -7, -6, -1, 35, 2, 12, -1, -3, 11, 11, -3, 7, -29, -3, 2, 15, 1, 1, -6, 2, 0, -9, -20, -15, 11, -18, 20, 9, -15, -3, -2, -2, -6, 0, 2, 18, -5, -3, 8, 18, 21, -11, 3, -8, -16, 2, 3, -5, 0, -19, -3, 11, -3, 8, 25, -25, -2, -21, -6, -5, 13, 1, -8, -5, -3, -21, -2, 5, 1, 10, -13, -40, -5, 4, 17, 1, 6, -6, 3, -4, 9, -16, -7, 29, -1, 23, -22, -7, 17, 15, 2, 15, 6, -4, 11, 1, -6, -9, -2, -11, 9, -3, 12, 14, -14, 13, 24, 3, -1, 2, -7, -3, -5, 4, 1, 8, 13, -2, 9, -27, 2, 20, 12, -7, -16, 1, -2, -12, 3, 16, -3, 5, -3, -3, -13, 8, 8, -5, -12, -8, -8, -6, 6, -8, -2, -19, -3, -12, 4, 0, 1, 3, -3, 4, -2, -1, -5, -2, -4, -6, 24, 15, -2, -1, 0, 12, -9, -12, 13, 0, -17, -4, -2, -7, 1, 5, 3, 18, -2, 24, 9, 32, 45, -4, 9, 13, 6, -1, 7, -1, -8, 2, 0, -18, -4, 23, -5, 10, 17, -5, 2, 1, 1, 2, 10, -8, -6, -6, -19, 2, -1, 7, -20, 12, 41, 37, 13, 7, -4, 1, 46, 0, 14, -5, 10, 60, -1, 8, 2, 27, 5, -65, 9, 11, -3, 8, 13, 13, -4, 2, -6, 55, -1, -4, 5, 2, 2, -29, -2, -33, 11, 1, -37, -9, 4, 22, -7, -3, 2, -5, 13, -4, 0, -48, -26, -30, 21, 3, 17, -3, -7, -5, 4, 17, 1, 6, -10, -26, 12, -18, -10, 5, 18, 2, 5, -6, -3, 6, 10, 4, -3, 20, -1, 20, 5, -3, 13, 2, -10, -3, -29, 2, 0, -2, -4, -3, 1, -2, 1, 10, 0, -54, -11, -45, -10, 3, -27, -1, 2, -2, 1, 17, -3, -18, 4, 32, 20, -50, 10, 8, 2, 4, -2, -5, -4, 0, -5, -19, -7, -7, -5, -1, 23, -18, 24, 6, -24, 1, -4, -4, 5, 4, -4, -10, -2, 37, 17, -19, -8, 14, 27, 6, 6, -3, -14, -1, -9, -2, 2, -27, 3, -23, -4, 28, 10, -26, -5, 17, -15, -1, 10, -5, -3, 4, -4, -11, -3, 48, 2, -7, -7, -2, 1, 21, -13, 0, -26, -4, -4, 3, 0, -12, -1, 38, -2, 11, -3, -13, 5, 13, 8, -7, 11, -1, -1, -4, 0, -5, 3, 32, -1, -9, -10, 1, -12, 14, 40, -4, -10, 1, -1, -4, 5, -24, 1, 21, 2, 15, 10, 25, 3, 28, 26, 5, 12, -2, -3, -9, -2, -7, -2, 24, 6, 20, 8, -19, -8, 23, 18, -2, 2, -7, -2, -6, -7, -18, -5, 20, -5, 18, 29, -8, -10, 7, 7, -5, -1, 9, 5, 1, 5, -31, 12, -10, 7, 10, 40, 13, 19, -6, 15, -1, 57, -3, 6, 5, 1, 94, -5, -21, 14, -13, -6, -9, -7, -23, -24, -2, 4, -6, -7, 3, 8, 18, 0, -30, 7, -11, -25, 14, -22, 3, -14, 7, 12, 8, 8, 1, 0, 13, -2, -10, -12, -8, 5, 3, -12, -6, 0, -3, 31, 3, 9, 20, -3, 41, 1, 18, 6, -19, 12, 6, -5, 8, -2, 2, -5, -2, 3, -7, -3, -11, -2, 17, 0, -17, -1, 14, -1, 29, -3, 6, 3, -2, 1, -9, -1, -2, -2, 12, 1, -6, -27, -21, 7, 5, 8, 1, -15, -6, -7, 4, -3, 13, -4, 9, -1, -28, -7, -48, 0, -8, 25, -4, -12, -4, 6, -5, 0, 25, 1, -16, -2, 8, -35, -4, 12, 18, 15, -6, 21, 0, 0, 8, 0, 2, 3, 5, 7, 16, -11, -16, 5, -4, 9, 0, -2, -6, 7, -9, -5, 2, -4, -6, 3, 18, 8, -18, 0, 3, 1, 4, 32, 1, -6, -3, -2, 0, -2, 21, -3, -7, -3, 15, 10, 40, -45, -4, -20, 0, 1, -6, 2, -6, 0, 15, -1, 20, 16, 35, -1, 4, 11, -2, 5, 5, 2, 2, -1, -24, -4, 38, 8, 22, -10, 11, -4, -13, 9, 0, -20, -5, -9, 1, -7, -11, -2, 5, 6, 8, 3, 14, 10, 15, 17, -6, 38, 0, 4, 4, 2, 1, -1, 25, 2, 36, 28, 3, 0, 11, 37, -8, 64, -1, 10, -4, -8, -14, 0, -10, 18, 29, 14, 2, 5, 2, 15, 1, 21, -2, -2, -7, -12, 6, -5, -46, -11, 6, 36, 2, 15, -1, -3, -4, 40, 9, 6, -4, -6, 68, -7, -29, 5, 4, -8, -21, 24, -33, 19, 10, -29, -2, -5, 13, -3, 71, -3, -44, -6, -6, -27, -12, 4, 16, -6, 6, 13, 6, 8, 1, -11, 21, -3, 28, -1, -16, -14, 4, 18, -7, -10, 0, 4, -5, -3, 0, -6, -15, -3, -9, -4, -15, -21, -44, -9, -6, 5, 0, -12, 5, 9, 3, -5, 5, -2, 29, -8, -13, 20, 29, 0, 25, 12, 7, -29, 2, 1, -4, 10, 15, 5, 7, -4, 9, 10, -26, 10, 7, 15, 0, -28, -5, -1, 0, -2, -6, -4, -4, -3, 3, 6, 32, 1, 12, 30, 8, -19, -4, -4, -8, -5, -5, 2, 16, -11, -9, -2, -18, -11, 0, -16, 6, -18, -1, -1, 0, -5, -13, -1, 1, 8, 13, 5, -4, 8, -11, -12, -1, -29, -1, 1, -1, -1, 19, -3, 12, 11, -6, 11, 31, 7, 14, 8, 1, -8, 1, -1, -7, -1, -1, -2, 36, 12, -2, -15, -12, -2, -6, 47, -1, -6, -2, -5, 8, -5, 6, -1, 11, 12, 35, 25, 2, 5, 27, 28, -2, 2, -6, -5, -14, 0, -4, -5, 16, 8, 19, 13, 3, -14, -20, 13, -2, -6, -4, -2, 13, -7, -23, 2, 33, 3, 35, 14, 3, 5, 12, 14, 4, -6, -4, 1, -5, -4, 0, -3, 43, 0, 1, 30, 3, -16, 34, 15, -5, -1, -5, -10, -6, -3, -34, -1, 2, 2, 17, 0, -3, -10, 7, -9, -2, 34, 0, -9, -4, -16, -41, -12, -26, -4, -13, 5, 8, 30, -2, 9, 5, 47, -3, -19, 1, -5, 72, -6, -42, -14, -10, 12, -41, -12, -42, -22, 7, 12, -5, 6, 10, 2, 41, -1, -19, -16, -7, -16, -10, -8, -8, -4, 7, 12, 6, 3, -6, 5, 35, -3, -11, -2, -8, -33, 9, -3, 0, -14, 0, -21, -3, 0, -2, 4, 28, -1, -3, 5, -44, -35, 8, 6, -14, 3, 6, 1, -5, -1, -10, -6, -9, 0, 4, 2, 6, 5, -6, 6, -3, -6, -3, -25, -2, 0, -4, 5, 10, -3, -2, -1, 5, -12, -22, -12, 29, 0, 6, 28, -7, 5, -5, 3, -10, -4, 4, -5, 4, -12, 22, -15, 1, 7, -3, -11, 3, 0, -3, -4, -5, -2, -6, 3, 0, 2, -27, 1, 2, 8, 8, -5, 1, 4, -8, -1, 4, 0, 9, -6, 21, 0, -20, -8, 3, 33, -3, -8, -3, -3, 6, -6, -23, 0, 29, -2, 5, 11, 34, -10, -8, 25, -6, -5, 0, 2, -7, -5, -15, -6, 21, -6, 19, 11, -9, -2, -6, 30, 1, 7, -4, -4, -1, -9, 2, -3, 18, -2, -5, -24, 12, 3, 21, 19, 15, -3, -4, 0, 6, -5, -27, -6, 6, -7, 23, 27, -1, -13, -8, 4, -1, 5, -1, -5, 2, -2, -20, -2, 12, -6, 9, 5, -12, -6, -14, 34, 7, 9, 5, -2, 8, -4, -14, 3, 19, 15, -5, -3, -5, 9, 9, 18, 2, 11, -5, -4, 4, -7, -25, -3, -1, 0, 4, -3, -12, -4, 18, 34, -7, -23, 2, -6, -17, -13, -12, 5, -49, 11, 28, 40, 6, 34, 33, 19, 6, 52, 8, -4, -1, -9, 73, 5, -24, 6, -10, 22, -42, -11, -21, -7, 3, -40, -2, -1, 5, -5, 14, -6, -13, -2, -29, 3, -11, -21, -15, -29, 0, -9, 0, 4, -4, -4, -4, 1, -13, -8, -6, 4, -38, -17, 14, -21, 10, -19, -4, -3, -7, 10, -11, -2, -11, -5, 9, -4, -32, 0, -6, -6, 0, 29, 2, 2, -2, 11, -22, 4, -18, 7, -22, -32, 12, -4, 8, -6, 27, -12, -8, -5, 0, -2, -15, 1, 6, 4, 5, 5, -19, 2, 20, -14, 5, -24, -6, -3, 1, -14, -7, -2, 11, -7, -5, 5, -4, -2, 4, 36, 2, -26, -6, -3, -13, -6, -9, 0, 10, -2, -11, -5, 2, 15, 8, 1, 3, -14, 1, 6, 8, -4, -10, -5, 6, 3, 16, -29, 22, -2, -1, 5, 0, -17, 6, 3, -1, -2, 7, -6, 2, -1, 7, 7, -13, 3, -20, -20, 0, -6, 5, -3, 0, 1, -22, -2, 17, 0, -3, 21, 18, -8, 0, 4, 2, 6, -1, -5, -7, -3, -15, 3, 27, 0, 20, -8, 6, -2, 0, -5, 9, -11, 1, -1, -1, -13, -2, 11, -4, -11, 23, -17, -37, -5, 9, 9, -1, -11, -1, -4, -3, 5, -14, -5, 2, -3, 6, -15, -19, 6, 21, -10, 8, 1, -1, 0, 4, -5, -31, -7, 0, -4, 4, -22, 14, -2, 3, 4, 1, -21, -3, -7, 0, 2, -19, 0, 33, -2, 3, -3, -4, 7, -2, 32, -5, -3, -5, -3, -7, 4, -24, -3, -15, -12, 14, 39, 44, -5, 40, 9, 3, 10, -9, -9, 4, -3, 97, 1, -57, -14, 15, 33, -38, -18, -1, 12, -1, 31, 2, -15, 1, -12, 37, -5, -11, 1, -52, 4, -38, -7, 15, 9, -2, -11, -4, -3, 19, 9, 20, 1, -28, -12, 8, -1, 20, -8, 33, 4, -1, 11, 0, -2, -3, -3, 9, -3, 9, -8, -7, -23, -1, -6, -23, 27, -1, 13, -2, -1, -1, -2, 9, -1, -3, 0, 3, -10, -48, -6, -45, 9, -1, -14, -3, 2, -1, -1, -25, -5, 15, -5, -7, 11, 3, 0, 5, 4, -1, -6, 5, -1, -11, -6, 6, -1, 22, -11, 5, -23, -16, 11, -9, 2, -1, -27, 1, 2, -2, 0, -11, -5, 12, -6, 9, -3, -33, -13, 32, 8, 7, 3, -3, 1, -5, -2, -6, -5, 7, -1, 9, 11, 4, 1, -7, 8, -1, 1, -8, 1, -5, -13, -9, -1, 25, -5, -10, -1, 14, 5, 2, -7, 0, -27, 4, 2, -11, 1, 10, 2, 1, 6, 9, 8, -18, -13, -30, 13, 2, -21, -1, 4, 6, -3, -22, 0, 32, 8, 17, -13, -6, 11, -11, -6, 0, -19, 1, -3, 12, 2, -6, 1, 13, -5, -11, -14, 36, -9, -13, -10, -2, -21, -4, -6, -5, 6, -3, -1, 23, 3, -8, -1, -8, -6, -6, -2, 1, -1, -2, 1, 4, -3, -22, -5, 9, -1, 16, -12, -11, -9, 5, -5, 0, 3, -7, -1, 2, -2, -5, -2, 18, -10, 0, -9, -1, 5, 3, -4, 7, -11, 3, -6, -14, -2, -23, -2, -43, -15, -11, 45, 26, 6, 22, -23, 1, 60, -7, -2, 6, -5, 125, -1, -13, 0, -1, 10, -22, -19, -28, -2, 4, 45, -1, 0, 9, 13, 36, 2, -9, 1, -4, -35, -10, 13, 31, 16, -1, -3, -1, -4, 5, 0, 52, -4, -12, -7, 8, -28, -13, -11, -4, 11, -4, 26, -5, -6, 3, 3, -16, 3, 12, -5, -15, -3, -21, 5, 6, 17, 1, -29, -9, -7, 2, -4, 16, -1, -17, -4, 21, -2, 27, -10, 30, -6, 0, 0, -3, -2, 1, -11, -1, -6, 17, 9, 7, 5, -28, -10, 2, -4, 10, -1, 2, 0, -10, -2, -11, 5, 22, 2, 6, -15, -13, -4, -12, -6, -1, -14, -4, -5, -4, 17, -10, 4, -7, 1, 8, 3, -12, -3, -16, -3, -4, -19, -1, -4, 1, -5, -2, -5, 6, -10, -15, -2, 19, 7, 13, -6, 1, -7, -6, -4, 7, 9, -13, 1, 8, 11, 20, 1, -28, 4, 0, 14, -4, 8, -3, -2, -2, -3, -7, -5, -26, -4, -20, -31, -3, -1, -1, 5, -8, 4, -5, -3, 3, -16, 15, -4, -25, 0, -4, 12, 2, 7, -1, -22, 3, 3, -2, -5, 2, -8, -3, -5, 1, 0, 11, -11, -36, -2, 16, -14, 1, -16, -6, -1, -3, -3, -6, -1, 2, 3, 5, 1, -28, -3, -7, 3, -3, 8, 14, -5, 5, 1, -10, -3, 7, -1, -6, 3, 10, -24, 25, -5, 0, -2, -4, -2, 2, 1, 11, 1, 31, -1, -1, -9, 1, -2, 10, -5, 3, 16, -3, -7, -22, -8, -16, -3, -37, -18, -21, 7, 22, 29, -20, 5, 3, 44, -2, 11, -6, -6, 84, -3, -13, -1, -30, 5, 14, 15, -15, 2, 8, 2, 1, -3, -8, 1, 25, 2, -50, -5, -22, 27, -11, -3, -13, 0, -3, 36, -7, -5, -7, 3, 6, -1, -27, -8, -42, -8, -35, 6, -32, -16, -3, -31, 3, -2, -3, -4, 5, -4, -19, -2, -1, -19, 27, 3, 4, -14, 0, -11, -3, -2, -5, -1, -5, -6, 14, -1, 8, -11, -3, -6, 37, -2, 2, 17, -1, 2, 7, -11, 1, -4, 50, -3, 4, -16, -30, -1, 17, 17, -6, 4, 2, -2, -5, -6, -17, -5, 45, -4, 0, 9, 5, -13, 5, 15, -2, -9, -1, -4, 3, 7, -25, -6, 12, 0, 29, 22, -6, 3, 24, 13, -1, 6, -3, -6, -2, 1, 2, -2, 1, 1, 18, 2, -1, -9, -4, 18, 11, -13, -4, -5, -6, 8, -3, -2, -13, -7, 4, -5, 7, 11, -37, 4, 1, -6, -5, -7, 8, -2, -15, 2, -8, -3, 12, 7, 10, -3, -9, 12, 2, 16, 2, 4, 1, 2, -27, -4, 10, 5, 16, 11, 42, 1, 11, 7, 5, -18, 0, -3, -7, 1, -13, -1, 9, 0, -2, 6, 1, 3, -10, 27, 2, 18, -2, 7, -10, -2, -14, -1, 9, 10, 6, 11, 7, 3, 1, 13, -6, -6, -8, -4, 5, -5, -11, -4, 17, -4, 7, -23, 15, -5, 20, 11, -2, 20, 5, -2, -4, -1, -43, -1, 26, -4, -1, 10, 9, 0, 4, -1, 2, 19, -2, -3, -4, -44, 5, -3, -59, -9, -28, 27, 38, 21, 2, -25, 4, 92, 2, 3, -6, 0, 68, -6, -40, 2, -18, 19, -33, 13, -28, -29, -4, -10, 1, -6, 9, 6, 21, 6, -46, -12, -35, -29, 9, -8, -34, 8, 1, 8, 4, 8, -1, -3, 15, 3, -13, -2, -23, -26, 17, 10, -33, 12, 10, -25, -10, -4, 7, 5, 17, -3, 0, 1, -13, -6, -38, -12, -26, 6, 8, -7, -5, -6, 11, -7, 37, -1, -7, 2, -41, -11, 40, -13, 10, -39, 14, -28, -18, -3, 1, 5, 13, 2, -5, -1, -23, -26, -16, -10, -33, -18, -3, -24, -3, 2, 2, -1, -3, -6, -11, -7, -9, -9, -21, -4, -10, -25, 7, -23, 4, 0, -4, 11, 2, -1, -11, -2, -23, 6, -23, 0, -14, -19, 1, 4, -7, 5, -5, -10, 4, 1, -28, 10, -5, -21, -14, 4, -28, -12, -5, -36, -10, -2, -7, -1, -10, 1, -29, -8, -4, -20, 11, 2, -22, -21, -3, -8, -5, 2, 3, -5, -14, -2, 8, 2, 13, 2, 3, 11, -11, -14, 4, -11, -4, -3, 3, 6, -14, -6, 30, 0, -9, -7, 15, -11, 4, 11, 5, -3, 1, 6, -19, -4, -8, -2, 16, 12, 23, 8, -7, 6, -3, -24, 4, 4, 1, -1, -4, -2, -21, 1, 23, -5, -2, 6, -8, -3, 12, 17, -4, -6, -1, -4, -8, 6, -9, 0, -3, 2, -23, 30, -29, 3, -17, 7, -3, -10, 3, -4, -7, -3, -15, -7, -6, 20, -10, 14, -4, -1, -19, 0, 1, 0, 2, -2, -10, 8, 19, 2, -74, -15, -13, 20, 22, -24, -21, -85, 0, 26, 3, 1, 5, 10, 115, -5, -58, -11, -5, 1, -6, 13, -9, -22, -1, -1, -4, 1, -3, -2, -8, -1, -38, -15, -43, -45, 13, -1, -26, -47, 4, -22, -7, -1, 1, -3, 7, -4, -17, -8, -28, -27, 18, -5, -15, -23, 0, -30, 0, -1, -3, 5, -12, 5, 6, 1, -15, -20, -28, 1, -6, 7, 3, -26, 0, -3, -5, 1, -11, -6, -28, 4, -22, -25, 0, -7, -15, -8, -2, -21, 0, 0, -2, -4, 6, -2, -20, 4, -32, -15, -35, 11, -13, -12, -2, -15, -10, 1, -10, 14, 5, -5, -12, 1, -13, -30, -15, -7, -7, -24, -1, -6, -3, 3, -4, -6, -30, 0, -34, -5, -17, -15, -4, 15, -7, -54, 7, -8, -1, -5, -5, 1, 16, -6, -30, 4, -8, -22, -23, 1, -22, -26, -3, -35, -2, -3, -20, 13, -3, -5, -4, 4, -15, -11, -10, 4, -19, -35, 0, 5, -5, -5, -8, -10, -17, -2, 10, 3, 19, 13, -30, -6, 9, 10, -4, 26, -2, 1, 0, -8, -8, -6, -16, 5, -3, -1, 42, -4, 24, 22, -3, 5, -4, 0, 6, 2, -8, -2, 2, -4, 0, -3, 5, 2, 13, -10, 11, -18, 7, 1, -1, 8, -16, -6, -5, -5, -4, -29, 9, -5, -9, -12, 9, 3, 0, -4, 0, 5, -3, 0, -4, -8, -7, 19, -28, 4, -22, -3, -4, -9, -7, -2, -5, -5, -17, -2, 20, 3, 9, 11, -5, -2, -2, -7, 4, -13, 2, 0, -1, 7, -12, -4, -73, -5, -57, 45, 19, -12, -17, -35, -3, 26, -5, -7, -6, -3, 82, 4, -62, -10, -37, -10, -52, -14, -25, -62, 1, -23, -2, -10, -2, 5, 26, -3, -31, -11, -30, -59, -15, -13, -8, -29, -1, -29, -6, 1, -9, 0, 23, -1, -26, -1, -32, -50, 4, 1, -22, -10, -5, -43, 0, 4, -7, 3, 4, -5, 3, -11, -9, -2, 3, -5, 1, -5, -1, -34, 5, 5, -12, -8, 0, -7, -13, -5, -29, -34, -14, -4, -16, -18, 8, -17, -6, -7, -3, -4, -9, -4, -16, -1, 7, 3, 11, -7, 1, -13, 1, -4, -2, -1, -7, 0, -10, -4, 12, -1, -1, 3, -6, -3, -19, 10, 9, -2, 0, 4, -4, -15, -15, -7, 31, 8, -16, -17, 2, 3, 5, -6, -3, 6, -5, -1, -8, -6, -5, -3, -5, -6, -12, -6, -23, 16, 0, -4, -1, -13, 2, -1, -9, 3, -14, -3, 6, -1, -14, -16, 10, 1, -17, 3, 2, -30, 1, 3, -9, 0, 3, 1, 47, 3, 8, -9, 0, -9, -1, 3, -5, 7, -4, -4, -3, -1, 0, -4, 13, -2, -12, -6, -10, 2, 16, -16, -2, 9, 3, 1, 13, 13, 16, -3, -1, 4, 7, -10, 0, 1, -12, -15, 0, -5, -5, 0, 3, -8, -13, -1, 4, -3, -6, -8, -24, 3, 28, -8, 3, -3, -1, 0, 8, 11, -5, 0, 1, 1, -19, -15, -7, -1, -16, -19, 3, -13, 1, -5, 11, 2, -17, 0, 5, -3, 5, -24, 9, -7, 1, 14, -5, -5, -4, 0, 5, -3, -65, -7, -69, -6, -47, 9, 6, 0, -11, -77, -2, 47, 1, 2, 12, 0, 84, 0, -52, 4, -50, -28, -7, -9, -21, -33, -16, -43, -8, -8, -15, 0, -5, -2, -44, 1, -34, -36, 5, 3, -46, -8, 1, -39, 0, -6, -1, 8, 9, -4, -21, -7, -25, -41, -20, -10, -11, 12, 10, -23, -3, 1, -5, 1, 1, 1, -15, 4, -15, -21, -32, -4, -39, -5, 5, -15, 12, 0, 5, 8, -9, -3, -35, -5, -7, -11, 0, -2, -12, -12, -1, -4, -5, 2, -6, 16, 0, 0, 2, -2, -12, -18, -6, 8, -7, -9, 0, 2, -1, 0, -4, 8, -24, -5, 3, -8, 19, 2, -3, 6, 16, -8, -4, -6, -2, 3, -5, 0, 7, 0, -16, -2, -12, 7, 9, -6, -3, -1, 0, -9, 2, -3, -4, -5, 6, -7, -9, -6, 1, 2, -8, 0, 7, 20, 0, -1, 5, 2, 2, -3, -16, -3, -9, -6, -5, -15, -8, 0, -5, -20, -2, -10, -4, -5, -7, -5, 18, -1, 6, -1, 2, -9, -46, 0, 12, 1, 8, -16, -1, 2, -5, 6, -13, 0, 13, 5, -1, -6, -30, 3, 15, 9, -7, 3, -7, 2, 13, -3, -3, 0, 2, -4, -1, 7, -20, -12, -25, 11, -3, 0, -3, 1, 8, 5, -8, -5, 9, -3, -11, 12, -4, -3, 9, 7, 1, 7, 0, 1, -20, 5, -11, -3, -2, 0, 14, 14, -8, -10, -6, 23, 9, 0, 0, 2, 0, 2, 2, -2, 21, -1, 25, -2, -6, 6, 2, -2, 8, -6, 0, -6, -4, 8, -38, -2, -64, -2, -30, -16, 6, -4, -55, -63, 1, 7, -3, -12, 13, -5, 64, -3, -63, -9, -70, -53, -13, -9, -18, -75, -2, -16, 2, -7, -3, 4, 11, -4, -17, -5, -36, -41, -17, 2, -20, -56, 3, -17, 3, -3, 0, -2, 35, 1, -20, 0, -49, -23, -5, -3, -25, -49, -2, -16, -2, 1, 0, -2, 3, 3, -19, -4, -4, -33, -8, -4, -39, 30, -4, -29, -5, -2, 4, 0, -16, -1, 0, -5, -12, -10, -6, -14, 20, -1, 9, 0, 0, 1, 10, -8, -18, 0, -2, 9, -10, -30, -15, 0, 21, -19, 1, -27, 0, 2, 12, 12, 4, 0, 7, 4, 21, 12, -12, -19, 26, 23, 1, 2, 5, -1, 7, 7, -11, -3, 8, -2, -5, -5, 10, -2, 8, -4, 2, -15, 5, -6, -5, -3, -3, 2, -7, 0, -18, 5, -22, -3, -10, -5, -1, 8, 0, -1, 7, 1, 17, 2, 18, 2, 4, -4, 26, 0, 28, 14, -2, -6, 8, -4, 3, -2, -4, -3, -25, 2, 1, -7, 36, 4, -25, -24, 2, -11, -14, -6, 7, -6, -31, -4, 13, 1, -3, -12, 27, 6, -1, 16, -5, -6, 4, 3, 3, 3, -25, 1, 18, -2, -4, 11, -16, -9, -13, -2, 0, -5, -4, 2, -5, -3, 2, -1, -1, 0, -7, -6, 17, -11, -5, 8, 2, -4, -7, -3, 6, -6, -19, -3, -20, -1, 14, 13, -11, 13, 5, 1, -4, -6, 3, -6, -4, -7, 10, 0, -7, -8, 24, 8, -1, 5, 11, -9, -6, -3, 2, -5, 2, 2, -1, -3, 
  20, -5, 17, 19, 48, -19, 55, 35, -2, 64, 3, 11, 11, 3, -27, -3, 41, 5, 65, 82, 2, 1, 3, 78, -11, 82, -2, 1, -3, -16, -20, 5, 26, 5, 40, 37, 22, 10, 44, 13, -20, 94, 5, 9, 8, -5, -12, 4, 20, 14, 36, 9, 11, 0, 30, 37, 3, 56, 0, 1, -1, -10, 30, 3, 37, -2, -4, -18, 3, 13, 38, 21, 0, 23, 2, -10, 9, 0, 0, -1, 1, 4, 24, 22, -10, -7, 13, 26, -3, 8, 9, -1, -6, 11, -11, 0, 24, 3, 27, 36, -23, 12, -1, 9, 8, 21, -9, 2, 4, -17, 15, 2, 19, -12, 28, -1, 17, -7, -26, 16, 6, -3, 7, 4, 5, -7, 4, -2, 2, 3, 1, 21, 50, 0, 0, 18, -6, -5, 3, 6, 3, 4, 1, -3, -15, 11, 2, 9, -3, -1, 28, -1, 9, 29, 7, 4, 1, 4, 3, 0, 6, 3, 17, 3, -14, 4, 14, 14, -1, 9, 9, -1, 7, 1, -7, -1, 2, 1, 4, 5, 13, -7, -15, 6, -16, -4, 5, -2, 0, 14, 8, 3, 2, 2, -3, 1, -5, -10, 35, -3, 1, 4, 6, 6, 3, -1, -7, 1, -13, 3, 12, 5, 17, -4, -6, 16, -1, 16, 1, 1, 3, 2, -2, -4, 13, 7, 7, 0, 23, 9, 1, -1, 1, 0, 8, -6, -2, -17, 11, 3, -22, 3, -3, 5, 14, 11, -7, 4, -9, -5, 5, 0, 5, 4, 21, 2, 18, 1, 10, -1, 3, 14, -19, -6, 1, -17, -1, 0, 2, 1, 8, 5, 22, -7, -2, -19, -8, -7, 2, 6, -1, 8, -1, -4, -13, 0, -19, -5, 33, 9, 32, 41, 23, 22, 36, 42, -3, 33, 6, -2, 4, -3, -9, 6, 18, -5, 8, 24, 21, -2, -3, 6, 6, 44, 8, -3, 7, 1, -25, 2, 11, 10, 36, 27, 30, -4, 16, 46, -8, 28, 0, -3, 6, 5, -9, 5, 20, 2, 4, 21, 75, -2, -17, 2, -3, 31, 3, 9, 7, -5, -5, 2, -7, 7, 14, 13, -15, 9, 12, 23, 0, 28, 1, 4, 1, -11, 37, 1, 24, -1, -7, 6, 16, 3, 2, 25, 2, 26, 4, 0, -4, -5, 21, 1, 15, -7, 30, 17, 16, 0, 25, 2, 7, 3, 0, 4, 3, 3, 14, 6, 1, -2, -4, 27, 19, -3, 2, -7, -4, 1, 2, -2, -6, 10, 11, 1, -20, 2, 2, 13, 22, -2, 2, -14, -7, 5, 0, -3, 2, -6, 18, 0, -22, -7, -1, -1, 8, 6, -6, -6, 3, 12, 3, -9, -1, 1, 23, 0, 1, -1, 0, -16, 14, 5, -4, 33, -7, -9, -6, -2, 23, -5, 7, 3, -9, 4, 9, 22, -3, 4, 2, 17, -2, 0, -4, 2, -5, 5, 10, 8, -5, 7, -6, 0, 6, 8, -1, -5, -11, 6, 1, 1, 8, 2, 50, 6, -29, -4, 20, 1, 5, 6, -10, -21, -1, -3, 4, 3, -5, -1, -4, -2, 14, 9, 18, 7, -1, -7, 22, -13, 6, 20, -1, -1, 2, 10, 1, 3, 31, 7, 27, 16, 0, 2, -1, 9, 2, 21, 1, 1, 10, -9, -3, 6, 19, 18, -25, -30, -23, 1, -23, -18, 3, -16, 7, 3, -5, 1, -8, 1, 16, -15, 3, 30, -3, 14, 33, 46, -2, 5, 0, -8, -8, 1, 9, 2, 10, 12, 23, 44, 22, 27, 0, 31, 0, 34, 1, -6, -5, 5, -5, 6, 28, 0, -14, 32, 21, -7, -3, 13, 13, 10, 4, 8, -4, 7, 22, 4, -11, 20, 20, 8, 30, 16, 22, 29, -8, 8, -3, -5, 7, 2, 11, -3, 15, 2, 31, 2, 13, -3, -5, -8, 10, -2, -2, 2, -6, 4, -13, 2, 20, -2, 26, 31, 13, 22, 17, 32, 0, 9, 5, 2, 1, 8, 7, 5, 13, 5, 30, -9, 4, -3, -12, 4, 0, 35, -3, 6, 1, 9, 33, 4, -27, 6, 14, -13, 19, 0, -7, 5, -5, -10, 1, 2, 7, 6, 3, 0, 17, -3, 2, -1, -26, 16, 10, -11, 3, 0, 7, 4, 13, -1, 5, 5, -17, -4, -12, -2, -24, -4, -13, 5, -1, -1, -7, 3, 2, 10, -18, 3, -11, 3, 7, 13, 8, -1, 10, -3, 1, 2, 3, 1, 6, 3, 14, -2, 22, 4, -7, -6, 4, 3, -15, 12, 0, 15, 4, 2, 0, -2, 24, 3, 12, 0, -12, 5, 13, 21, 8, -1, 2, 6, 4, 4, 3, 4, 1, 3, 13, 12, 15, 28, 18, 3, 30, -21, -8, 6, 1, 0, 0, 7, -1, 3, -13, 2, -20, -19, -25, 5, 8, 19, 6, 3, 0, 0, 0, -4, 5, 1, 21, 9, 9, -5, 10, -3, 4, 2, 2, -28, 14, 2, -8, -3, -10, 6, 14, 2, -25, -39, -25, -11, -16, -11, -3, -14, -2, -2, -17, 2, -3, 1, 6, -10, -5, 18, 18, -1, 56, -10, 1, 4, -10, 2, 1, 7, -32, -1, -6, 14, 14, 6, 40, 9, 13, 36, 7, -23, -3, 1, -11, 2, 11, 7, 11, 12, 17, 10, 40, -4, -3, -5, 0, -3, -1, -12, -4, 4, -4, 1, 12, 0, 22, 17, 25, 6, 29, -13, -15, 34, 0, 0, -4, 10, 16, 5, 20, 16, 31, 24, -1, -10, -5, 17, -14, 28, 3, 3, 1, -1, 2, 4, -4, -8, 9, -7, -10, 4, 23, 19, -2, 25, 3, -2, 1, 5, -13, 4, 2, 4, -2, -6, 20, 4, -19, 6, 2, 25, 0, 4, 4, 3, 3, -4, -19, -5, -6, -1, -1, -16, 7, 14, 4, -18, 4, 0, 9, 10, 1, 0, 3, -1, 3, 2, -2, -5, -13, -18, 4, -2, 1, 1, 6, 2, 1, 0, -8, -12, -28, -1, -15, -7, 15, -14, -5, 7, -2, 1, 4, -1, -7, 3, -1, -4, 22, 6, 6, 8, -11, 5, -2, 13, -3, 5, 3, 19, 17, -8, 16, 0, 18, 11, -19, -2, 8, 12, 7, -9, 3, 0, 7, 1, 16, 3, -18, -4, 13, -4, 3, 10, 15, -19, -10, 12, 2, 3, -1, -19, 2, -1, 10, 6, -28, -5, 29, -5, -11, -5, -3, -12, -8, 1, 1, 7, 1, 1, -20, 4, 5, -12, -11, -4, -2, -15, -1, -22, -2, -5, -10, 3, 1, 4, 5, 0, -28, -17, 0, -2, -3, 2, 0, 23, -6, -2, 11, -21, 9, 6, 0, -11, -40, -45, -54, -18, -20, -12, 7, -35, 2, -11, 8, 5, 2, 2, -15, -12, -9, 6, 27, 9, 27, 9, 1, -13, -2, 8, 12, -4, 18, 6, 31, 26, 13, 23, -16, -11, 31, -16, -2, 19, 0, 10, -4, 6, -12, 7, 25, 0, -8, -12, 17, 13, 24, 35, 1, 39, 1, -6, 7, 3, 10, 3, 24, 4, 40, 10, 4, 13, 14, 25, 3, 34, -2, -1, -4, -26, -22, 4, 18, -9, 40, 11, 1, 5, 14, 8, -5, -3, 5, -6, 1, -13, -6, 5, 2, 13, 5, 27, 2, 11, -1, 19, -1, 26, 3, 1, -4, 2, 0, 1, 25, 6, 26, 34, 23, -1, 29, 35, -3, -7, 0, -1, 9, 11, -22, 1, -17, -23, -13, 1, -11, -12, 14, -13, -9, -47, 4, 1, -1, 3, 26, 3, -6, 10, -20, -6, -21, -3, 14, -1, 1, 10, 1, 1, -2, 4, 2, 3, 3, -14, -17, -11, 20, -1, -1, -16, -4, -5, 2, 7, -6, 4, 20, 2, -15, 5, -14, -5, -21, -12, -10, 5, -4, -31, -2, -6, -1, 4, 1, 5, 23, 1, -26, 10, -15, 4, -11, -14, 1, -14, -1, -9, 9, -11, -40, 3, -4, 1, -1, -21, 38, -3, -10, -4, 1, 42, 1, 1, 3, 4, 4, 4, -14, 4, -7, -25, -1, 2, -16, -23, 1, 11, 2, 2, 0, 0, -9, 0, -6, -1, -29, -16, -14, 4, -17, -14, 1, -4, -10, 4, 0, 7, 16, 6, 1, 13, -12, -26, 2, 6, 1, -22, -4, -6, 8, 3, 5, 15, 15, 5, -14, 10, -22, -65, -51, -7, -19, -22, -2, -6, -4, -3, -3, 2, 45, 8, -6, -13, -34, 6, 13, 2, 27, 12, -1, 1, 5, -5, -3, 7, 17, 6, 29, 0, -12, 2, 48, -11, 15, -3, 12, 10, 4, 3, 11, 2, 15, -1, 21, 4, 28, 9, 40, 2, 28, 20, -2, -8, 2, 1, 1, -14, -15, 1, -4, -1, 20, 24, 21, 4, 10, 12, 3, 36, 4, 4, 3, -6, 10, -2, 11, 11, 14, 16, 39, 1, -4, 9, 0, -17, -1, 4, 11, 2, -7, 4, 3, 14, 22, 45, -18, 5, -5, 17, 3, -20, 3, 5, -5, -1, 6, 5, -6, -1, 1, 8, 24, -5, 10, 6, -4, -5, 7, -2, 3, 2, -17, 7, 2, 1, -6, 3, -4, -4, -27, 27, 5, -23, -1, 3, 0, -1, 6, 0, -10, 0, -17, -22, 4, 4, 18, -48, 3, 16, 3, -1, 9, 17, 3, 10, -12, -6, 9, -26, -16, 10, -2, -5, 4, 9, 4, 1, -2, 1, -11, 4, -3, -3, 4, -26, -2, -1, 10, -5, 6, 14, 2, 0, 4, 11, 18, 4, 7, -7, -1, -4, 16, -1, -26, -22, -1, -12, 3, 0, 4, 6, 7, 3, -6, -4, -27, -32, -7, 8, -10, -7, 7, -34, 2, 5, -5, -2, 10, 6, 4, -5, -20, 2, -28, -4, 13, -27, 0, -16, 0, -3, 14, 4, 42, -2, -43, -1, -3, -11, -6, -15, -6, -17, 8, -5, 3, 8, -9, 5, 11, -1, -26, -5, -16, -12, 5, -5, 1, -7, -3, -23, -1, 0, -8, -11, -11, 2, -25, -12, -26, -66, -39, -21, -56, -34, 7, -10, -1, -21, 8, 1, 54, -2, -6, -8, -14, 3, -11, -19, 9, -26, 5, 8, 3, 2, 8, 6, 11, 1, 9, 11, 2, -3, 34, 21, 7, -3, 1, -20, -6, 0, -3, 2, -9, 2, 12, 10, -7, 4, 3, 4, 0, -1, -6, 36, 1, 6, 7, 5, -24, -2, 23, -4, 26, 0, -11, 13, -3, 11, -2, -2, -2, -3, 0, -2, 14, 1, -26, -4, 13, -4, 30, -11, 6, -11, -1, 4, -1, 5, -4, -13, -15, 2, 16, 5, -8, 24, -24, 3, 15, 7, -11, -3, 3, 3, 3, 7, -8, 1, 4, -6, 2, 3, 18, -17, 1, 29, 6, -19, 7, 2, -8, 5, -6, 4, 11, -6, -6, -12, 24, -8, 22, -9, 6, -9, 6, 3, 7, 2, 11, -2, -18, 1, 4, 20, -6, -2, -5, -52, 6, -8, 1, 6, -5, 3, 4, 5, -27, 0, -23, -12, -16, -15, -1, -16, 1, -1, 5, 4, -3, 10, 12, 0, -13, -1, -17, -7, -23, 4, 18, -12, -2, -25, 2, 4, 0, 6, 4, 0, -28, -2, -1, 16, -34, -3, -37, 2, 4, -24, 0, -1, -6, 2, 4, 3, -2, 4, -1, 11, -11, -22, -5, 0, -2, -11, 8, -1, 7, -1, 21, 4, -14, 8, -30, -9, -16, -18, -1, -11, -1, -30, 2, 5, 6, 7, 8, 5, -34, -4, -32, -31, -10, -7, 20, -12, -4, -29, -3, -2, -6, 3, -5, 5, 10, 29, -24, 15, 1, 2, -13, 1, -9, -22, -3, 0, -14, 18, -20, 4, -24, 8, -36, -51, -38, 6, -24, -26, 0, -33, 1, -17, -10, 3, 52, 6, -6, -15, -6, -6, -1, -10, 8, -6, -2, -32, -4, -1, -4, 1, 33, 2, 11, 2, 27, 14, 8, -18, -10, 37, -5, 12, -5, 3, 0, -6, -18, 1, 23, 6, 9, 10, 5, -16, -17, 1, 3, -5, -1, 11, 6, 9, -5, 0, 9, -3, 11, 27, -11, -20, 29, 16, 1, 5, 0, -2, 4, 10, 13, 7, 31, 0, 19, 13, 11, -7, -11, 16, -2, -5, 6, 2, 9, -3, -4, 1, 30, 3, 22, 17, 2, -7, 2, -24, -9, -19, 5, 3, -8, -8, -4, 6, 17, -11, 10, -16, 26, -19, 42, -1, 5, -31, 8, 1, -2, -11, -9, -2, 6, 2, 0, 3, 34, -17, 31, 19, -15, 14, 2, 2, 5, -7, 8, 6, 12, 11, -10, 7, 13, -19, 17, 9, 3, -7, 2, 4, -8, 8, 3, 1, 4, -2, 1, -39, -4, 2, -5, -19, 9, -8, 8, 2, 2, -1, 17, 1, 5, -1, -13, -1, 14, -18, 8, 6, 1, -14, 14, 5, 5, 3, -11, 0, -19, -15, -8, -6, -31, -15, 3, -12, -5, -14, -1, 3, 1, 17, 20, 4, -20, 2, -34, -9, 33, -1, 11, -8, 3, -33, 4, -1, 2, -3, 30, 6, -8, 5, -18, -13, 24, 5, 11, -22, 5, -19, -3, -2, 12, -4, 0, 0, -27, 0, -23, -30, -13, -17, -20, -2, 0, 1, 2, -2, 9, 10, 18, 3, -14, 15, -14, 9, 0, -13, -9, -25, -2, -10, -4, 1, 0, 3, -7, 3, -25, -10, -50, -35, -33, -39, -42, -26, 0, -33, 3, -14, -2, 13, 38, 3, 0, -15, -12, 1, 20, -28, 21, -4, -3, -17, -3, -3, 1, 5, 5, 3, 30, 3, 15, 1, 21, -2, 5, -8, -3, 33, 3, -3, -3, -10, -25, 2, 7, -13, 15, 8, 29, -12, 25, 36, 0, 35, -3, 11, 8, 0, -1, 4, 14, 5, 36, 12, 38, -10, 33, 21, 1, -3, -4, 0, -3, 13, 21, 2, 7, 4, 12, 17, 7, -20, 27, 39, 4, 18, 1, 3, -2, -1, -3, -2, 20, 2, 16, 21, 19, -16, 13, -2, 1, 19, 0, -3, 4, 0, -27, 3, 21, 4, -6, -4, 25, -24, 6, 26, 8, -2, 2, 6, -2, 5, 2, 2, 11, 2, 21, 9, -12, -19, 4, 2, -1, -4, 2, -5, 12, 11, -7, 0, 14, -1, -2, 11, 28, -21, 9, -4, 1, 10, 7, -9, -5, 9, -4, 1, -5, 4, 7, -14, 4, -7, 0, 15, -2, 0, 0, -1, -3, 4, -9, -3, -21, -4, -10, 18, 28, 0, 3, -12, -2, -19, -2, 1, -2, 2, 7, 0, -6, -9, -9, -11, 23, -7, -4, 1, 5, 3, 3, 3, -14, 5, 0, 6, -24, 7, 16, 1, 25, -28, 2, -30, 4, 8, 2, -1, 3, 9, 24, 5, -37, 0, -13, 15, 15, -9, -5, -13, -4, -8, -1, 4, -7, -11, 7, -3, -25, 1, -8, -22, 20, -23, -16, 15, -7, 11, 8, 4, 12, 18, -2, 1, -34, -5, -15, -6, -6, -7, 4, -25, -4, -2, 1, -1, -5, -7, 24, 2, -20, -11, -24, -27, -15, -40, -31, -14, -15, -22, 7, -12, 4, 4, -48, 2, 11, -9, -4, -18, 23, -38, 34, -19, 1, -17, 0, 4, -7, 1, -6, 3, 2, -2, 25, 21, 41, -4, 25, -6, -2, -2, -1, 5, 0, -3, -8, 6, 26, -2, 14, 35, 33, 29, 22, 39, 0, 45, 1, 3, 4, 1, -13, 1, 11, -10, 30, -4, 40, 4, 24, -12, 2, -3, 4, -10, 6, -9, 31, 3, 14, 3, -4, -6, -4, 8, -5, 31, 7, 3, 2, -5, -4, 10, -6, 3, -15, 2, 17, 17, -2, -11, -7, -12, 2, 0, 3, 3, -7, 4, 11, -5, -15, -10, 6, 11, 19, -4, 16, -6, -2, 28, 1, 2, 0, -4, 0, 0, -12, 5, 2, 2, 32, -8, 17, -19, 0, 5, -2, -1, 1, -5, 7, -3, -28, 2, 10, -29, 5, -4, -28, 4, 4, 23, 2, 4, 1, -3, 25, 4, -6, -2, -27, 4, 34, -12, 9, -1, 5, -2, 9, 4, 0, 7, 12, 3, 11, -6, 2, 18, -29, 3, -8, 8, 5, 2, 1, 5, -13, -4, 24, 1, 2, -1, -8, -2, -12, -49, 1, 10, -6, 3, 3, -1, 1, -6, 0, 5, -23, -8, 8, -5, 26, -14, 22, 1, 2, 2, 1, 3, -3, 9, 32, 0, 5, -6, 9, -4, 3, 3, 0, 20, 1, -3, -2, 6, -3, 3, 0, 4, -4, 0, -15, -10, -4, -27, 6, -4, -3, -26, 5, 3, 4, 4, 13, 3, -19, 7, -21, -29, 6, 0, 1, -12, 5, -8, 6, -6, 9, 1, 18, 3, -8, -2, -24, -18, -29, 13, 3, -31, 7, -35, -6, -13, -13, 1, -43, -2, 24, -6, 4, -25, 27, -5, 4, 4, 2, -35, 2, -6, 3, -2, -9, -1, 28, 8, -8, -4, 51, 20, 27, 6, 6, 38, 13, 3, -2, -17, -39, 6, 12, -16, 15, 9, 46, -9, 17, -18, 0, -17, 4, 2, 7, 13, 0, 0, -31, -4, -6, -1, -1, -11, -7, 2, -8, 34, 3, -8, -13, -2, -1, 4, -5, 4, 4, 20, 16, -13, 13, -20, -8, 15, 1, 3, -2, 6, -2, 1, -19, 3, -1, -6, -22, -16, 13, -5, 12, 17, 4, -1, 2, 6, 20, 2, -12, 2, -5, -27, 26, 4, 20, 0, 3, -18, 0, 7, -2, -1, 17, 0, -8, -3, -8, 8, 39, 1, -4, -13, -2, -8, 7, -2, -1, -4, 18, 6, -23, -1, -25, 17, 8, -17, -12, -4, -14, -10, 6, -4, 0, 11, 7, 0, 8, -12, 3, -16, -11, 12, -6, -25, 4, -6, -7, 9, -3, 3, -8, 3, -7, -10, -5, -11, 24, -2, -21, -11, 4, 17, 1, 1, 7, -6, -12, 3, -4, 0, 6, 8, -5, -9, 4, 13, 2, 2, 4, -4, 5, 4, 21, 0, 8, -8, 1, -3, -6, 5, -1, -1, 2, 10, 0, 2, 4, -25, -14, 2, 1, 1, -12, 13, 10, -14, 0, 17, 4, -3, 4, -3, -3, -1, -16, 0, -24, -5, -32, -41, 3, -10, -10, -5, 2, -4, -1, 7, -1, -4, 17, 4, -18, 7, -9, -20, 5, -3, -1, 1, -4, -7, 9, 7, 3, 17, -7, 6, -8, 18, -13, -38, -35, -7, -7, 9, -4, -49, 5, -12, 1, -12, -65, 1, -5, -3, -28, -3, 61, -9, -9, -2, -9, -10, -12, 10, -1, 3, -57, 2, 7, -6, -3, 2, 29, -3, 38, -10, 0, 30, 8, -6, -20, 0, 8, 3, 12, -8, -1, -2, 52, 20, 27, -16, 0, -19, 3, 7, 8, -6, -11, 2, -11, 9, 25, -13, 25, 9, -4, -13, 0, -5, 2, 7, -4, -12, -4, 2, -15, 0, -21, -7, 1, -6, -7, 8, 2, 25, 5, 1, 3, 7, 6, -5, 3, -1, -9, 4, 54, 5, 42, 7, -1, 21, 3, -2, 4, -2, -15, 1, 19, -2, -28, -26, 46, -8, -9, 2, -3, -3, 1, 5, 1, 1, 18, 3, 10, 0, 0, -24, 15, -19, -10, 22, 2, 1, 3, 0, -1, 2, 16, 5, -42, -13, 23, 12, -11, -27, -12, -10, 4, 16, 1, 5, 7, 3, 23, 3, 18, 3, -23, -9, 23, 0, -21, 8, -1, -10, 6, 3, -8, 6, 11, 2, -43, 5, 3, 7, 2, 6, -18, 17, 1, 25, -1, 2, -8, 3, 14, -1, -38, 1, -12, 2, 12, -1, -18, -7, 7, -7, 2, 1, 7, -2, 5, 2, -32, -4, 13, 10, 1, 12, -11, -38, 1, 17, -5, -1, 4, -8, 23, 3, -17, -2, -18, -6, -29, -2, -33, -29, -6, -14, -2, 2, 5, 0, 4, 1, -21, -8, -23, -11, 15, 9, -20, -21, -2, -5, 2, 5, 10, 5, 17, 0, -18, 4, -16, -24, 2, 9, -2, -13, 1, 7, -7, -1, -2, -2, 27, -11, 12, -2, -11, -34, -12, -24, 6, -13, -1, -56, 1, -8, -7, 5, -93, 6, 13, -19, 14, 4, 8, 12, 28, 23, -3, -6, 3, 7, 4, -4, -13, -2, 25, -6, 16, 22, -12, 18, -2, 13, -5, -8, -7, -11, -3, -2, -14, 2, 5, 13, 5, -5, -4, 13, 11, -5, -1, -31, 1, -9, -23, 2, -42, 4, -21, -3, 20, -19, -2, 10, -11, -1, 3, 3, 0, 0, 10, -1, 13, -1, -15, 1, 12, 3, -9, 2, -28, 6, -11, -6, 1, 1, 8, 0, 2, -2, -13, 0, 4, 24, 20, -7, -5, -4, 2, 11, 7, 8, -2, 1, -11, 2, -9, 1, 28, 5, 46, -7, 4, -29, -2, 4, 2, -6, 2, 4, -23, 0, 21, 1, -9, 39, 1, -9, -19, -8, 2, -18, 1, -2, -3, -3, -2, -11, -6, -13, -13, 11, 9, -6, -1, -5, 3, 1, 0, -1, 11, 1, -6, 2, 7, -5, -19, -11, 12, -1, 1, -6, -4, -32, -2, 5, -1, 1, 0, -2, -25, 3, 10, -1, -22, -12, -37, 37, 1, 14, 0, 3, 10, 0, 7, 0, -12, 2, -18, -17, -34, -2, -4, -13, -2, -7, -4, 3, -1, 3, 21, 5, -44, -4, -27, 10, -8, 2, 13, -6, 3, 16, 5, 7, 4, 2, 11, 0, -1, -11, -13, -8, -17, -6, -20, -15, 2, -38, 2, -3, 1, -2, 1, 1, -30, -3, -33, -28, 2, 6, -11, -37, 5, -59, 4, -9, 1, 12, 9, 1, 15, -16, -33, -21, 2, -5, -4, -13, 0, -20, 0, 2, 6, 10, -9, 6, 51, 14, -7, -41, 0, -22, 1, 9, 1, -35, -6, -10, 3, 7, -64, 8, 30, -3, -6, 14, 24, -28, 37, -18, -10, 26, -3, 7, -10, 4, -71, 2, 42, 6, 8, 30, 11, -2, -16, 0, -5, -10, -6, -3, -3, 16, -22, -1, -26, 4, 16, 15, -6, -15, 7, 11, 4, 1, 8, 6, 0, 4, 13, 3, 3, 7, 12, 24, 45, 14, 4, -5, -1, 17, -3, -7, -9, 6, 0, -2, -28, 3, 15, -19, -28, 2, -25, -12, -4, 25, -2, 0, 8, -8, -17, 0, -12, 4, -6, -7, 25, -12, -5, -10, 6, 29, 5, 6, -7, 0, 3, 1, 4, 1, -9, -4, -34, -2, -15, -34, -3, 21, 6, 10, 12, 4, 8, 0, -21, 5, 6, 0, 22, 8, 1, 21, -3, 18, 4, -3, 3, 10, 11, 3, 2, -6, -13, -7, 5, -6, 10, 14, 2, 25, 2, -3, 0, 0, -16, 2, -7, -11, 2, -12, -37, -6, -9, -8, -7, 12, 2, 5, 9, -2, -3, 3, -38, -5, 3, 15, 12, 3, 4, -48, 0, 9, -2, 0, -4, 0, -6, -1, -11, -10, -40, -20, -1, -1, -28, -24, 0, 4, 0, 11, 11, -3, 7, 0, -14, -14, -12, -16, -3, 16, 17, -13, -4, 10, 0, 3, -11, 7, 21, 3, -34, -4, -29, -12, -8, -5, -13, -16, -3, 2, 6, -2, 5, 4, -2, 7, -46, 0, -2, -36, -5, 9, -36, -15, 5, 2, 4, 4, 10, 1, 36, 5, 1, -5, -16, -2, 4, 11, -8, 5, 1, -34, -2, 7, 1, 16, 37, 6, 27, 7, 13, -2, -7, -25, 1, -13, -5, -46, -3, 18, -5, 0, -75, 2, 42, 9, 11, -14, 46, 8, 45, 21, -6, -15, -1, 1, -7, -3, -44, 2, 18, 15, 8, 17, 4, 8, 8, 4, -9, -16, -3, -3, 6, -5, -31, 5, 9, 0, 10, 37, -11, 8, -3, 13, 4, 17, 3, 0, 8, -3, -26, 5, 3, -1, 39, 32, -8, -6, 17, -2, -7, -4, 4, 7, 10, 4, 10, 3, -2, -3, -4, -6, 10, -3, 4, 6, 0, 21, -3, 6, 6, -5, -5, 5, 5, 5, -6, 12, 19, 14, -24, 3, 1, -34, 2, -4, 4, -3, 12, 0, -9, 11, -2, 11, -19, 11, 0, -6, 4, 8, 0, 3, -3, 5, 8, 5, 8, 0, -1, -3, 24, -2, -2, -9, -10, 1, -1, -1, 2, 2, -4, 2, -6, -1, -24, -4, 21, 11, -6, -31, 6, 9, 3, 6, -4, 6, 25, 0, -36, 2, -8, -12, -34, 5, 10, -31, 3, 7, 2, -2, 1, 4, 11, 2, -22, 3, -21, -9, 10, 3, 6, -27, -1, -6, 2, 2, 1, 3, 0, 0, -16, 0, 2, 22, -7, -9, -19, -15, -16, 0, 1, 0, -4, 8, 26, 5, -5, 5, -17, -30, -1, 15, 5, -4, 4, -3, -3, 0, -5, 1, 15, -1, -13, 5, -10, -6, 11, 3, 13, -38, -2, -11, -2, 6, -14, 8, 12, -2, -23, -19, 6, 4, 4, -11, -9, -15, -4, -13, 4, 3, -2, 9, 22, 7, 2, 0, -1, 4, 14, 7, -14, -31, 12, 24, 0, 1, 18, 17, 18, -5, 49, -7, -29, -35, -7, -34, -40, -12, -1, -54, -7, 0, 2, 6, -74, -4, 30, -5, 9, -18, 43, 10, 22, 11, -4, 35, 0, 5, 0, 2, -17, 0, 14, 4, 28, -9, 7, 20, 18, 32, -4, 8, -1, 0, 9, 7, 1, 3, 9, 12, 11, -3, 42, 17, -15, 20, -13, 21, -3, 4, 4, -10, 18, 1, 9, 7, -12, 6, 32, 5, 6, 8, 0, -30, 1, 3, 5, -15, 28, 3, 16, -7, 15, 30, -9, 2, -7, 12, -28, 17, 8, 0, -5, 2, 12, 2, -8, -2, -11, -7, 12, 3, -17, 14, -8, 22, 4, 1, 2, 8, 11, -3, -7, 2, 8, -1, 7, 2, -11, -40, -7, 23, 1, -1, 13, 2, 13, 6, -10, 2, 12, 4, 0, -12, -11, 5, 1, 11, 5, -8, -6, 4, 7, 4, 0, -6, -14, 27, -22, 5, 1, -5, 4, 19, -5, 0, 0, 1, -3, 1, 2, 5, -12, -8, 16, -2, 16, 18, -2, 8, -2, 1, 6, -7, 21, 0, -18, 0, -2, -23, -15, 6, 3, -8, -1, -3, 2, -1, 8, 6, 8, 4, -26, -2, -17, 6, -10, 0, 3, 5, -2, 13, 5, 1, -2, 15, 6, -10, 8, 6, -20, 21, 36, 4, -7, -4, -3, 13, -4, 5, -1, -2, 10, 4, -6, 2, -5, 15, 15, -3, -21, 4, -6, 1, 6, -3, -6, 2, 29, 0, 3, 2, -1, 24, -19, 1, -4, -7, 0, 17, 5, 0, 4, -2, 19, 0, -34, 3, -2, 3, 3, -14, -2, -30, -2, 4, 8, 2, 7, -6, 30, 3, 14, 11, -9, -36, -44, 7, -39, -11, -5, -9, 9, 13, -1, 0, -97, 2, 57, 11, -10, -32, 35, 18, -2, -12, 1, -31, -3, 19, -1, 13, -34, 3, 13, -1, 55, -4, 35, 9, -12, -11, 0, 11, 3, 8, -16, -6, -22, -4, 29, 8, -3, 7, -12, 10, -34, 2, -4, -4, -1, 6, 5, -1, -7, 7, -1, 9, 5, 22, 1, 4, 19, -30, 8, -14, 3, 4, 6, 1, -5, -1, 5, -2, 0, 10, 50, 2, 44, -9, 2, 11, 2, -3, 0, -3, 18, 2, -13, 4, 4, -8, -4, -3, -6, -9, -1, 6, -4, 2, 8, 7, -5, 0, -22, 10, -2, 24, 11, -6, 10, -8, 0, 26, 0, 1, 7, 0, 13, 2, -11, 7, -12, 4, 32, 17, -30, -11, -2, -4, 4, -1, 5, -2, 3, 0, -6, -3, -11, -14, -3, -1, 6, -12, -5, -1, 1, -2, 2, 10, 4, 0, -31, 4, 8, 4, -15, -8, 1, 13, 0, 29, -6, 0, 15, -2, -7, 2, 0, -6, -3, -13, 17, 12, 30, -12, -2, 23, 2, 1, -7, 7, 24, 2, -31, -8, -16, 14, 6, -13, 5, 7, -4, 24, 0, 5, -9, -1, 9, 3, -13, 5, 9, 19, -38, 12, 17, 16, -3, 17, -2, 7, 4, -6, 8, 1, -20, -4, 11, 1, 9, 5, 6, -4, 5, -4, 0, 2, -4, 1, 17, 5, -8, 0, -17, 12, 14, 10, -1, 2, 2, -1, 9, -1, -6, 3, 0, 2, -13, 12, -4, 8, 4, -6, -5, 2, -5, 10, -7, 4, 17, 6, 25, 5, 42, 16, 9, -47, -28, -9, -21, 16, 0, -63, 6, 1, -4, 1, -127, -2, 16, 5, 2, -11, 25, 21, 29, 4, -2, -50, 3, 6, -8, -11, -34, -3, 5, -8, 5, 33, 5, -8, -31, -14, 0, 0, 5, 2, -1, -5, -56, 3, 13, 7, -10, 22, 15, 14, 4, -13, 2, -24, 2, 6, 4, -8, 15, -1, -13, 4, 12, 5, 19, -4, -6, -13, -5, 26, 5, 3, -2, 6, -15, 1, 19, 8, -18, 5, -30, 11, -32, 7, 2, 2, 6, 3, 3, 5, 4, 7, -15, -12, -2, -4, 30, 7, -2, 4, -14, 3, 2, 7, 11, -3, 7, -2, -18, -6, -3, 20, 16, 7, 11, 9, 0, 13, -1, 3, 4, -17, 9, -3, 5, 2, -7, 1, 13, 6, 17, 2, -2, 20, -2, 4, 3, 3, 0, 1, -5, 8, 14, 3, -16, -1, -17, 13, -1, 3, 1, 5, -6, -12, 17, 3, -8, -10, -20, 0, 27, -8, 0, -14, 5, -3, 0, 3, 1, 3, 10, 6, 19, 3, 23, 32, 6, 2, 1, 1, 1, -5, 4, 6, -2, 18, -21, 2, 24, -5, 6, -15, -5, -5, -1, 24, -7, 1, 0, 4, -4, 6, 1, 0, -7, -1, -15, 16, 38, -3, -14, 8, 4, 16, 4, -2, 0, 8, 8, 1, -5, 1, -9, -5, 27, 7, 4, 0, 4, -5, -17, 0, -1, 0, 11, -1, -5, 2, 1, -1, -3, 24, -23, 5, -1, -1, 2, 6, -4, 0, -8, 6, -34, 7, 1, 10, 2, 4, -11, 2, -7, -21, 1, 3, 21, 10, 15, -2, 42, 17, 20, -6, -22, -36, 14, -1, -6, -50, 3, -10, 2, 5, -85, 0, 11, -2, 31, -9, -7, -15, 9, -7, -7, -5, 6, 2, 2, -3, -27, 3, 45, 2, 22, -28, 8, 2, 16, 3, 5, -37, 5, 2, 8, 1, -10, -1, 28, 6, 36, 5, 29, -3, 30, 14, -2, 30, 2, 0, 1, 5, -6, 3, 12, -5, -2, 20, -27, -2, -8, 15, 1, 10, 6, 6, 8, -2, 5, 5, -10, 3, -11, 12, 4, 12, -38, 4, -4, -14, 6, 0, -8, 10, -3, 1, -46, 0, -1, 21, 31, -1, -18, -13, 1, -3, 2, -1, 6, 3, 13, 6, -47, 8, 2, -6, -4, 13, -10, -19, 3, 6, 0, 2, -4, -8, 21, 0, -16, -2, -26, -23, 2, -4, -24, -17, 1, -6, 2, 5, 4, 5, 4, 1, 0, 4, -15, -8, -1, 7, 11, -15, -10, 10, 4, 1, 10, -7, 6, 4, 13, 7, -8, 8, -10, -8, 39, -2, 0, 5, 5, 1, -6, 5, 14, 0, 6, 3, -10, -11, -11, 9, 12, -14, -2, -12, -1, -1, 2, 0, 25, -2, -4, 0, -12, -14, -42, 0, -3, -9, -1, 20, 1, 5, 7, 1, 9, 2, -4, 1, -3, -6, -4, -3, 13, -26, -3, -18, -1, -3, 6, 3, 13, 2, -7, -11, -6, -11, -8, -1, 0, -12, 2, 5, 9, 5, -2, 6, 11, 6, -22, 7, -5, 20, -14, 4, -17, -8, 5, -21, -1, 9, 4, -2, 47, 5, -31, 8, 1, -11, -12, -2, 0, 0, -5, -18, 4, 4, 5, 44, -4, 0, 59, 9, 27, -22, -37, -19, -10, 29, -2, -87, 2, -3, 7, -1, -71, -2, 41, -1, 25, -18, 28, -17, 28, 30, -1, 8, -2, 9, -12, -7, -20, -10, 48, 12, 33, 30, -7, 13, 31, -8, 5, -4, 2, -3, 4, 4, -11, 1, 16, 2, 23, 25, -20, -11, 37, -9, -10, 31, 11, 5, -3, -2, -19, 0, -2, -4, 10, 6, 42, 14, 28, -5, -16, 5, 4, 5, -14, 1, -37, 6, 7, 2, 41, 12, -40, 10, -8, 37, -20, 25, 12, 2, 1, -7, -8, 3, 11, 0, 18, 29, 16, 5, 27, 19, 5, 24, 2, 2, -1, 0, 2, 6, 9, 5, 7, 9, 21, 5, 9, 25, -10, 24, -4, 1, -3, -16, -9, 5, 12, 7, 22, -4, 23, 3, 12, 23, 3, 0, 9, -4, 5, 11, -5, 2, 31, -11, 5, 21, 16, -1, 27, 14, 3, 35, 5, 4, 1, 1, 16, 1, 28, 4, 2, 14, -4, -5, 22, 16, 4, 11, 6, 4, -3, 4, 11, -3, -2, 1, -11, -2, 3, -14, 12, 11, -6, 6, 4, 0, -2, -7, 10, 3, -29, -2, 14, 2, -15, 9, -8, -12, 1, 1, 0, -5, 18, 6, 9, 1, -13, -11, -22, -13, 8, -6, 5, 23, 0, -8, 0, 3, 3, 8, 17, 2, -21, 6, 6, -10, 12, 1, -13, -18, 7, 8, 4, 3, 9, -11, 11, 0, 2, -6, 24, -35, 31, 1, 15, -8, 4, 12, 5, 5, 7, 6, 11, 5, 12, -18, 9, -17, 0, -3, 19, 2, -1, 0, -2, 5, 11, -6, -21, 5, 71, 19, 14, -20, -23, 23, 17, 79, 0, -25, 0, 2, -9, -11, -113, 3, 63, 11, 5, -1, 6, -13, 2, 24, 2, -1, 6, 0, 3, -4, 4, 4, 39, 16, 40, 50, -14, 5, 23, 47, 0, 22, 3, 1, -6, 2, -9, 1, 15, 7, 29, 29, -20, 4, 18, 23, 0, 26, 5, 7, 1, -6, 9, -3, -3, -2, 16, 25, 31, 1, 4, -8, -2, 25, 0, 2, 0, -6, 8, -1, 28, 3, 21, 21, -1, 5, 14, 8, 2, 23, 1, 0, 2, 6, -10, 2, 17, 2, 33, 8, 30, -6, 15, 6, 1, 16, 8, -1, 3, -16, -8, 5, 13, -2, 10, 25, 19, 9, 5, 19, 0, 7, 0, -6, 1, 8, 29, -1, 37, 4, 24, 10, 8, -16, 4, 51, -9, 5, 1, 7, 3, 1, -16, 0, 30, -8, 9, 25, 20, 4, 24, 21, 1, 30, 1, 3, 21, -8, 7, 1, 1, -1, 17, 13, 7, 2, 23, 39, 0, -4, 4, 4, 5, 10, 20, 1, -16, -7, -13, -18, 29, 10, -12, -10, 1, -25, 5, 0, -3, 1, 11, 5, 10, 1, 0, -3, -44, 3, -23, -15, 0, -4, -1, 4, -12, 0, 8, 1, 3, 2, -5, 2, -3, -3, -10, 8, -14, 19, -5, 2, -1, -9, 20, 5, 5, 2, 2, 31, -6, 6, 8, 12, -8, -1, 0, -1, 6, -1, -1, 0, -1, 8, 3, -14, 27, -2, 22, 6, 2, 5, 1, 4, 3, -2, 15, 1, -19, -1, -10, -4, -1, 3, 3, 5, -2, 7, -2, -2, 4, -7, 7, 2, 74, 8, 63, -47, -17, 15, 14, 36, 1, -29, 4, 8, 6, 1, -81, 3, 62, 5, 37, 8, 49, 12, 30, 61, 1, 24, 2, 5, 6, -1, -23, 1, 25, 14, 29, 55, 15, 17, 12, 27, 4, 24, 0, -1, 11, 5, -24, 3, 29, 8, 29, 48, -2, 0, 21, 17, 1, 44, 0, -5, 4, 1, -4, 1, 1, 7, 9, 8, -2, 6, 0, 4, -1, 33, -2, 0, 11, 9, -4, 4, 16, 7, 25, 36, 14, 0, 17, 15, -4, 21, 5, 5, 6, 4, 11, 0, 18, -2, -6, -3, -15, 5, -1, 10, -3, 7, 3, 1, 4, 6, 6, 3, -17, 6, -1, -7, 6, 6, 17, -9, -8, 1, -1, 1, -1, 17, 15, 4, -30, -10, 22, 14, 2, 0, -3, 5, -1, -8, 5, -1, 5, 4, 2, 1, 0, 1, 11, 5, 16, -16, -1, 5, -3, 9, -3, 0, 9, -5, 13, -2, -8, 0, 13, 13, -14, 0, 21, 2, 1, 33, 4, 4, 8, 0, -3, 2, -45, -1, -9, 11, 5, 2, -3, -8, 5, -9, 5, 1, -3, 0, 4, 2, -10, 2, 10, 10, 3, 0, -18, 15, 3, -6, 0, 1, -11, -16, -18, 2, 0, -5, -8, 8, 0, 4, 11, 12, 3, 10, 4, 2, -4, 7, 9, 2, -1, 2, 4, 5, 25, 1, -28, 10, -4, 1, 5, 0, -5, -8, 5, -2, -1, 0, 13, 9, 4, 2, 14, 18, -8, 16, 4, -1, -13, -3, 13, 0, -9, 3, -5, 24, -7, 4, -3, -8, -1, 9, 6, -2, -6, 0, 63, 2, 76, 11, 48, -10, -7, 3, 7, 76, -1, -50, 2, 5, -17, 2, -85, -1, 52, -5, 55, 26, 9, 11, 23, 31, 18, 39, 5, 6, 13, -4, 1, -1, 47, -4, 37, 35, -3, -4, 51, 10, 5, 40, 6, 6, -1, -7, -15, -1, 22, -1, 28, 41, 14, 12, 9, -5, -8, 24, 4, -4, 5, -4, -3, -2, 17, 2, 13, 20, 29, 5, 38, 1, -7, 10, -7, 0, -5, -9, 10, -3, 30, -1, 11, 4, 1, 2, 11, 17, -4, 1, 1, -2, 3, -13, -5, 0, -1, 0, 11, 17, 6, -6, 5, 16, 0, 0, -1, 0, 5, -4, 27, 4, -2, 7, -22, -1, 4, -5, -15, 14, 7, 7, 4, -3, -2, -7, -11, 1, 16, -1, 14, -3, -13, 7, -1, -1, -2, 8, 1, 6, 2, 1, -8, 6, 8, 2, -9, -1, 3, -3, -6, -19, 0, 1, -5, -3, 2, -1, 16, 2, 5, 5, 4, 10, 7, 4, 6, 24, -1, 10, 6, 1, 5, 3, -18, -1, -4, 5, 0, 7, 44, -1, -17, -2, -9, 20, 4, 1, 3, -8, 18, 5, -8, -1, -6, 6, 25, -8, -16, -10, 7, -6, 5, -4, -7, 4, 2, 5, -4, -3, 2, -9, 23, 7, 24, -11, 0, -1, 2, -2, -10, -10, 4, 1, -11, 4, 13, -17, 4, -2, -12, -10, 0, -5, 1, 5, 13, -3, 18, 2, -1, -2, -15, -18, 11, 6, 6, -26, -10, -2, 1, 1, 0, 1, 0, 1, -14, 3, -23, -4, 0, -7, 4, 6, -10, 2, 3, 5, 1, -5, 39, 5, 61, -1, 31, 19, -4, -3, 61, 68, -4, -9, 2, 16, -7, 3, -66, 4, 60, 3, 75, 57, 19, 10, 16, 73, -3, 15, -3, 1, 2, -9, -15, 4, 19, 0, 34, 41, 13, 4, 23, 58, -3, 16, -2, 10, 1, -3, -31, 4, 24, 2, 44, 23, 2, 1, 30, 43, 2, 17, 4, 2, 2, -1, -7, -5, 15, 1, 4, 32, 12, 10, 37, -23, 1, 28, 4, 4, 2, 4, 16, -7, 2, 3, 12, 9, 5, 15, -14, 5, -7, 2, -3, -7, -8, 9, 21, 6, 8, -10, 5, 28, 19, -1, -25, 23, 3, 22, 5, -3, -9, -10, -7, 2, -6, -2, -20, -9, 12, 14, -21, -24, 2, -2, -1, 1, -11, -12, 15, 4, -9, 4, 4, 6, -9, 4, -15, 5, 2, 14, -7, 5, 3, 6, 2, 2, 4, 2, 19, -6, 20, 6, 17, 10, 6, -3, 5, 2, -6, 0, -14, -1, -20, 1, -3, 1, -24, -2, -23, -17, 2, -1, -2, -2, 1, 8, 4, 4, 24, 1, 6, 1, -36, -1, 27, 22, -1, 15, 15, 2, -1, 12, 29, 0, -19, 2, 0, 5, -26, -8, 2, -18, 7, 2, 0, 0, -3, 2, 18, 5, -14, 5, 2, -17, 14, 8, 7, 1, -1, 5, 2, -2, 4, -2, 1, -1, 8, 1, 2, 4, -19, 7, -1, -7, 2, 7, 11, 5, -4, 8, 22, 5, 19, 3, -18, -6, 8, -10, -2, -6, -1, 0, 0, 2, 8, 6, -11, 4, 5, 9, -32, -11, 7, -1, -11, 5, 2, 7, 1, 0, 2, -6, 1, 1, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 2,6528 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0076696383766829967, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[2] = { -3418, 3418, };
const TfArray<1, int> tensor_dimension8 = { 1, { 2 } };
const TfArray<1, float> quant8_scale = { 1, { 9.9584853160195053e-05, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,96,65,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0032620930578559637, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,96,65,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0052384482696652412, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,48,33,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0052384482696652412, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,48,33,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.012984295375645161, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,24,17,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.012984295375645161, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,6528 } };
const TfArray<1, float> quant14_scale = { 1, { 0.012984295375645161, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,2 } };
const TfArray<1, float> quant15_scale = { 1, { 0.37908875942230225, } };
const TfArray<1, int> quant15_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,2 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,5,6 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,2 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,7,8 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 6240, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 13056, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 49920, (TfLiteIntArray*)&tensor_dimension9, 6240, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 49920, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 49920, (TfLiteIntArray*)&tensor_dimension11, 12672, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 25344, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25344, (TfLiteIntArray*)&tensor_dimension13, 6528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 6528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6528, (TfLiteIntArray*)&tensor_dimension15, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 17;
  for(size_t i = 0; i < 17; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 8; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 8; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 8; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
