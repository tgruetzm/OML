/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 10.07.2022 13:34:52

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 65552;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[17];
TfLiteEvalTensor tflEvalTensors[17];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[8];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,6435 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0038860882632434368, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 99, 65, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data2[2] = { -1, 6800, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data3[8*3*3*1] = { 
  /* [0][0][][] */ 80, 54, -46, 
  /* [0][1][][] */ 93, 127, -51, 
  /* [0][2][][] */ 113, 103, 108, 
  /* [1][0][][] */ -102, -81, -97, 
  /* [1][1][][] */ -123, -23, -82, 
  /* [1][2][][] */ -93, -127, -94, 
  /* [2][0][][] */ -122, -75, -103, 
  /* [2][1][][] */ 39, -89, -117, 
  /* [2][2][][] */ -127, 43, -113, 
  /* [3][0][][] */ 13, 100, 55, 
  /* [3][1][][] */ 108, 127, 25, 
  /* [3][2][][] */ 102, 120, 102, 
  /* [4][0][][] */ -110, -20, -81, 
  /* [4][1][][] */ -41, 71, -127, 
  /* [4][2][][] */ -46, -92, -123, 
  /* [5][0][][] */ 83, -49, -33, 
  /* [5][1][][] */ -83, -58, -85, 
  /* [5][2][][] */ -127, -66, 32, 
  /* [6][0][][] */ -67, -98, -95, 
  /* [6][1][][] */ -108, -127, -42, 
  /* [6][2][][] */ 49, -4, -109, 
  /* [7][0][][] */ -126, -120, -98, 
  /* [7][1][][] */ -20, -2, -127, 
  /* [7][2][][] */ -114, -112, -83, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant3_scale = { 8, { 0.0017879115184769034, 0.0023213906679302454, 0.0022861268371343613, 0.0029507698491215706, 0.0020512419287115335, 0.0010794580448418856, 0.0028124914970248938, 0.0018017205875366926, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[8] = { -9189, 995, -2723, -5107, -3572, -10062, 1813, 845, };
const TfArray<1, int> tensor_dimension4 = { 1, { 8 } };
const TfArray<8, float> quant4_scale = { 8, { 6.9479820012929849e-06, 9.0211287897545844e-06, 8.8840906755649485e-06, 1.1466951946204063e-05, 7.9713072409504093e-06, 4.1948692341975402e-06, 1.0929590644082054e-05, 7.0016453719290439e-06, } };
const TfArray<8, int> quant4_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[16*3*3*8] = { 
  /* [0][0][][] */ -20,-91,-82,127,-56,-53,-9,-75, 46,-40,-66,-29,-19,-56,-36,-67, 45,-49,24,35,-12,55,10,-31, 
  /* [0][1][][] */ 68,-66,-58,34,-36,-24,-74,27, 44,-48,29,1,-25,-29,-48,-76, -23,-7,-88,36,31,40,-19,-11, 
  /* [0][2][][] */ 13,-87,-108,96,5,-55,-60,-7, 59,-81,-49,20,-3,-29,-79,-71, -41,-20,-50,21,-36,21,-30,37, 
  /* [1][0][][] */ -106,52,-118,-101,-35,-61,21,9, -127,-88,-79,-30,-102,-1,-48,-55, 14,49,-12,26,27,-51,-99,-9, 
  /* [1][1][][] */ 51,-117,-45,26,24,7,-23,4, -90,24,65,-45,-6,-41,-103,-87, -67,-56,64,-51,-54,-103,44,58, 
  /* [1][2][][] */ 68,-48,34,18,-111,-25,-100,-87, -78,26,-60,-46,-10,-122,-102,2, -82,-12,-29,5,44,-82,52,-48, 
  /* [2][0][][] */ -50,6,-101,-79,-10,51,-112,-119, 77,-34,-44,127,-16,-49,-91,10, -13,-68,-70,-55,-5,9,7,-2, 
  /* [2][1][][] */ 39,-13,37,105,-3,59,-70,-118, 55,-67,-97,-8,-3,-56,-77,-28, 16,-48,47,74,-24,39,-80,48, 
  /* [2][2][][] */ -8,-19,9,-89,1,54,-36,-45, 35,-64,-69,72,-12,58,-49,-62, -11,11,12,8,-80,-69,-1,22, 
  /* [3][0][][] */ -17,-32,-50,-5,-76,38,-92,41, 18,-96,-20,127,28,44,11,-48, -14,-95,24,-26,-67,48,47,-48, 
  /* [3][1][][] */ 15,-122,-61,116,39,-51,-49,39, 21,16,34,15,-68,-25,-36,-32, -80,-41,-61,4,-39,-36,-32,-20, 
  /* [3][2][][] */ -79,-111,7,101,-107,43,-111,-127, -76,-12,13,51,-64,-67,32,-60, -86,0,-2,-76,-31,57,38,59, 
  /* [4][0][][] */ 36,-45,4,12,-31,-38,-109,-6, 45,-75,-24,7,-51,-33,-27,-7, 88,-80,26,69,-83,38,-37,-5, 
  /* [4][1][][] */ 18,-51,-107,16,-83,-18,-91,-127, 22,-75,-23,-58,10,22,-94,-60, 23,-90,-20,58,-43,-18,11,-27, 
  /* [4][2][][] */ 25,-74,-48,10,-94,-23,-91,-49, 72,-72,-100,87,-73,-48,-86,-36, 31,-36,13,15,-13,-26,-58,-68, 
  /* [5][0][][] */ 46,-75,-88,81,11,37,-50,9, -26,-100,-102,59,-17,59,-61,-81, -29,-26,7,2,20,-22,-50,-10, 
  /* [5][1][][] */ -22,-2,-17,17,-95,-44,-71,-1, 11,-75,-10,-68,6,-25,-45,-74, 5,25,-16,42,-49,7,22,9, 
  /* [5][2][][] */ -30,-100,-61,127,-71,41,-107,-51, 81,-18,-58,-25,-1,23,-10,-54, -33,-11,-29,71,-25,24,-30,-28, 
  /* [6][0][][] */ 40,0,7,87,-11,11,-71,35, 16,-15,9,-98,-2,53,-34,-93, -74,45,-7,-17,24,-51,-7,-41, 
  /* [6][1][][] */ -3,-11,-29,-127,-87,-4,-4,-58, 76,-21,-74,59,-15,-12,56,-77, -85,-15,-28,-40,-33,17,17,-63, 
  /* [6][2][][] */ -34,-38,-7,-3,22,37,-53,53, 41,27,-84,-48,-94,61,-40,2, -1,15,-50,-8,31,7,-4,52, 
  /* [7][0][][] */ -5,-89,1,-12,-65,45,-10,-13, 84,-101,-66,19,31,14,-4,-123, -71,-66,-58,1,23,2,-36,21, 
  /* [7][1][][] */ 67,-51,-87,4,-3,18,-44,-85, -2,-16,23,76,-13,-59,-42,-64, 47,-47,-38,77,38,-22,11,-64, 
  /* [7][2][][] */ 52,4,12,25,-12,-66,-83,13, 7,-32,-62,127,-90,-35,-63,-51, 2,-18,32,-35,-13,-3,-24,4, 
  /* [8][0][][] */ -95,-72,65,-51,-76,-45,-38,74, -52,-77,-100,29,35,-9,15,30, -42,-127,24,-126,-44,-103,42,5, 
  /* [8][1][][] */ -67,-113,-91,-86,27,-126,-5,14, 31,-70,-6,-58,28,40,-64,50, -74,27,-81,6,-96,-52,18,-40, 
  /* [8][2][][] */ -23,-34,-102,23,-119,-127,9,-2, -91,19,3,-112,-110,-116,-97,-93, -76,-30,-106,-76,-99,-110,-88,-63, 
  /* [9][0][][] */ -39,-100,-9,-39,37,43,-127,-60, -19,66,58,-89,22,18,48,-61, -90,-27,49,-16,2,-41,10,6, 
  /* [9][1][][] */ -93,20,8,80,43,-6,-51,-80, -8,20,-9,8,-43,70,12,-20, -47,-57,-45,-21,38,22,-105,21, 
  /* [9][2][][] */ -26,-23,-5,-42,-54,57,7,46, -88,-55,-104,-71,50,-54,10,59, 47,-109,-104,-107,-8,23,-12,-80, 
  /* [10][0][][] */ -6,-21,-6,-7,-25,-74,-76,-26, 47,-28,-23,53,32,2,22,-88, -65,-11,-17,-59,-13,-43,38,-34, 
  /* [10][1][][] */ 93,-4,-6,102,-77,-49,-89,-26, 74,-124,-37,-26,-30,-63,-120,-36, -57,33,32,-40,18,-86,-35,47, 
  /* [10][2][][] */ -5,-91,-91,127,-29,-20,-57,-16, 96,-127,10,-45,-81,-14,-38,-99, 20,-20,11,-48,-66,-70,-87,-64, 
  /* [11][0][][] */ -14,-77,-65,43,-58,-92,-32,-52, 28,-8,16,-67,-67,-38,-13,22, 41,-13,-87,108,47,-76,-2,-21, 
  /* [11][1][][] */ -31,-30,-57,93,-25,47,-23,-10, -16,-78,48,-62,-42,-14,2,-89, 127,-93,-51,-79,-51,2,-45,-33, 
  /* [11][2][][] */ -105,-105,-81,8,18,-8,-47,-112, -74,-52,-37,-8,-50,-80,-114,-62, -43,-48,-25,114,28,-42,17,-99, 
  /* [12][0][][] */ 46,-26,-124,-54,19,47,19,-107, -57,-42,64,-40,25,-116,30,13, -31,2,-83,-87,-38,25,-30,36, 
  /* [12][1][][] */ -114,32,-11,17,19,50,-45,-5, 41,-57,36,-127,-9,15,-108,9, 71,-29,-127,-4,-22,-84,-112,35, 
  /* [12][2][][] */ -62,-94,74,-15,-31,-27,-52,57, -40,-74,-61,-6,-82,-66,-99,-82, -69,17,-61,28,-67,-88,-103,-52, 
  /* [13][0][][] */ -54,-10,-98,21,-104,-103,-54,-105, -110,-69,-6,-64,31,-27,-115,-104, -63,-117,-89,15,-45,8,39,-73, 
  /* [13][1][][] */ 22,-49,27,-36,-16,-41,62,13, -86,8,12,-118,-43,44,-77,-1, 57,-127,-7,-98,-72,-40,54,-20, 
  /* [13][2][][] */ 0,-14,-42,-60,-60,5,60,-29, 3,-66,-77,-63,57,-37,43,-112, -123,-23,24,-62,26,6,-48,10, 
  /* [14][0][][] */ -21,-10,32,-4,-114,59,-91,-119, 2,23,-111,-25,64,-39,-20,-75, -70,59,24,-82,-36,22,-25,-33, 
  /* [14][1][][] */ -105,-34,37,-93,-7,-75,28,-30, -106,93,12,-64,-53,-97,0,60, 23,85,-117,29,-81,-127,33,-31, 
  /* [14][2][][] */ 16,12,-39,40,-53,-89,-46,26, 30,14,56,-60,33,-108,-110,58, 31,19,70,-50,57,-6,-33,-89, 
  /* [15][0][][] */ 44,13,-43,34,-87,-120,-106,-40, -51,-12,-24,-104,46,47,74,-13, 39,-86,16,-101,-59,10,-91,11, 
  /* [15][1][][] */ -34,0,-14,-119,-78,-70,-3,-63, -27,5,-64,-73,-69,29,-8,61, -9,-84,-6,-82,-48,58,46,9, 
  /* [15][2][][] */ -101,-37,-13,-14,11,-31,-127,17, 55,36,65,-58,8,-17,-58,-63, 25,-34,-76,-41,-51,40,47,56, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant5_scale = { 16, { 0.0026826141402125359, 0.0015740952221676707, 0.0019032912096008658, 0.0018315319903194904, 0.0033081534784287214, 0.0026015858165919781, 0.002080150879919529, 0.0024814857169985771, 0.0015661445213481784, 0.0017988973995670676, 0.0023847559932619333, 0.0018769060261547565, 0.001611230312846601, 0.0016238716198131442, 0.0016987333074212074, 0.0017007527640089393, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[16] = { 1703, -5481, 170, -2004, 3022, 1084, -985, 180, -5707, -3275, -2989, 452, -3010, -4451, -4288, -3912, };
const TfArray<1, int> tensor_dimension6 = { 1, { 16 } };
const TfArray<16, float> quant6_scale = { 16, { 2.1220224880380556e-05, 1.2451531802071258e-05, 1.5055563380883541e-05, 1.4487928638118319e-05, 2.6168416297878139e-05, 2.0579269403242506e-05, 1.6454572687507607e-05, 1.9629243979579769e-05, 1.2388639333948959e-05, 1.4229779480956495e-05, 1.8864084267988801e-05, 1.4846849808236584e-05, 1.2745280400849879e-05, 1.2845276614825707e-05, 1.3437454072118271e-05, 1.3453428437060211e-05, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[2*6800] = { 
  -20, -10, -21, 5, -17, 8, 0, -23, -5, -7, 0, -18, -8, -2, 0, 0, -14, -5, -6, -21, -2, -13, 3, -18, -11, -13, -3, 4, 2, 7, 1, 9, -7, 12, -4, -2, -10, -22, 1, 6, -14, 2, 31, -29, -8, -11, 2, -11, -23, -9, -3, 3, 8, -10, -6, -24, -10, -8, 13, -16, -3, 1, 4, 3, -34, -4, -7, -14, -29, -26, -8, -1, -2, -9, -44, -32, 4, 2, -7, -6, -19, -2, -1, -12, -27, -28, 4, -18, 2, -8, -12, -19, -3, -3, -10, 9, 5, -5, 22, -10, -12, -22, 0, -14, 1, 3, 29, -24, 1, 4, -8, -10, 7, -2, -10, 2, -7, -7, -1, 9, 9, -10, 5, 25, 6, 2, 6, 6, -2, -12, 18, -6, 13, 33, 3, 28, -7, -7, 39, -5, 0, -2, 9, -2, -3, -5, 15, 6, -7, -5, -15, 16, -3, -13, -2, -4, 2, 5, 7, -2, -19, -3, 11, 5, 58, 16, -5, 30, -2, -8, 7, 36, -5, -7, 0, -2, 20, 2, -5, 13, -3, 20, -1, 10, -11, 4, 13, -13, -5, 3, -8, 1, -8, -9, -6, 7, -22, 21, 0, -19, 18, -2, 10, -20, 8, -2, -18, -7, 2, -9, 1, 5, -32, -17, 0, 19, -13, 2, 8, -25, -2, 5, -2, 3, 3, -5, 4, -5, -14, 8, 8, -13, 8, 4, -18, 7, -3, -5, 5, -3, -22, -7, 3, -4, -13, -18, -5, -16, -3, 4, -8, -15, -8, -2, 9, 3, 1, 0, 12, -4, 5, 28, 5, 5, 5, -6, 23, -5, -2, -7, 6, -9, -2, 5, -4, 12, 5, 1, 8, -14, -4, 11, -35, -11, -6, 3, 5, 0, 1, 2, -6, 5, -47, 6, -12, -19, -1, 5, 12, 29, 4, -8, 3, 8, 3, 8, -11, -21, 3, 0, 6, -12, -8, -3, 6, 13, 4, 17, -6, 2, -1, 4, 13, 6, -31, 16, -4, 7, 2, -4, 14, 4, -9, 3, -9, -10, -5, -11, -3, 4, -36, -12, -20, -5, 1, -4, 5, -6, 0, -8, -6, 0, -20, 11, -9, -1, -48, -3, -5, -21, -14, 3, 16, 2, -7, 2, 3, 1, -9, -4, -14, 4, -22, 4, -2, -15, 5, -5, -24, -6, 5, -2, 6, 8, -6, -8, -8, -16, -30, -2, -9, -7, 3, 0, -2, -17, 8, 14, -2, 1, 33, 1, 25, 3, -4, -6, 1, 9, 13, -5, 30, 26, 4, -2, -2, 9, 28, -3, -17, -3, 10, -7, -1, 16, 8, -16, 2, -14, 7, 6, -4, -9, -28, 2, 5, -10, 27, -42, -2, -2, 0, -8, 1, -27, -2, -9, -4, 3, 6, -9, -4, 4, -18, -9, -6, -17, 4, -11, 29, 9, 14, 2, -3, 12, -13, 2, 7, 4, -4, -26, 20, 4, 10, -11, -17, -19, -12, -2, -13, 5, 9, 3, 3, -15, -11, 9, -9, -11, 0, 1, -32, -6, 2, -4, -6, 4, -24, -6, -4, -7, -17, -24, -14, -19, -6, -8, 2, -10, -3, 12, -11, 2, 2, 5, 13, 1, 0, -21, 2, 2, -5, -12, -4, -30, -6, -5, 1, 9, 22, -10, 3, -2, 7, -17, -12, 18, 3, -8, 12, -11, 0, -10, -4, -7, -3, 1, 6, 4, 4, 22, -7, -2, 17, 1, 12, -9, 8, -5, 0, 7, 6, -7, 1, 17, 2, 11, 1, 1, 2, -3, 16, 20, 1, -3, 6, -3, -7, 4, -7, 21, 16, 0, -3, -25, -7, 11, 18, -15, 10, -9, 8, 6, -8, 0, -3, -3, 6, -12, -1, -4, 9, -2, 9, 24, 1, 3, 6, 2, -22, 7, 4, 6, 36, -9, -9, 0, -4, -12, 14, 8, 1, 5, -4, 3, -23, -9, 6, -10, 21, -38, -7, -9, -1, -12, -17, -8, 5, 13, 5, -6, -32, -13, 9, -9, -23, -26, 2, -26, -13, -4, -15, -4, 2, 11, -4, -3, 1, 0, -6, -3, -42, -45, -7, -1, 6, -3, -2, -15, 7, 3, -6, 5, 11, -2, -12, 2, 27, 3, 1, -9, 2, 1, 6, 7, 9, 6, -3, -13, 7, 2, 18, 2, 2, -26, -7, -9, -10, -5, 8, -14, 6, -11, -14, -11, -12, 1, -2, -5, -29, 14, 3, -17, 2, -13, -8, 1, 1, -7, -17, 7, 26, -2, 7, -1, -4, 0, -3, -22, -3, 4, 11, 34, -7, -2, 7, 6, -28, -8, 3, 3, 29, 27, 3, 5, 1, -6, -24, -6, 4, -1, -6, 2, 16, -9, 1, -15, -14, -42, -10, -4, -1, 6, -26, -10, -4, -4, -13, -11, -2, -2, -20, 9, 1, 0, 6, -13, -4, -19, 14, -3, 19, 5, -1, -6, -18, -10, -10, -4, -12, -46, 5, -23, -6, 3, -7, -13, -9, -5, 2, -4, -16, 3, -16, -4, -30, -22, -10, -6, -12, 4, 8, 2, -1, -2, -13, 4, 20, 6, -13, -8, 4, 27, -11, 7, -1, -1, 5, 15, 6, 2, 0, -9, -6, -4, -2, -6, 43, 21, 13, 35, -1, -15, -1, -17, -6, -5, 0, -4, -1, 7, 0, -9, -6, 29, 13, 40, 2, -4, -10, 0, 2, -3, 5, 4, 6, -6, -15, 0, -23, 0, -1, -10, 8, -7, 42, -21, -2, 6, -10, 3, -24, -3, -8, -18, -29, -6, -7, -25, -1, -1, -6, 16, 1, 7, -3, 5, -35, -4, -2, -13, -47, -13, 13, -3, 12, 1, 12, -9, -15, 4, -4, 10, -38, 11, -16, -8, -14, -11, 11, -21, -7, -8, -3, -21, -3, -5, -5, 8, 8, -7, 5, -11, 20, -4, 3, -12, 13, -5, -6, -20, 10, 7, 6, 1, 47, 1, -7, -4, 73, 11, -2, 15, 10, -2, 29, 21, -3, 0, -10, -2, 22, -5, 0, 2, 34, 22, -3, -7, 15, 0, 41, 20, -7, 1, -3, -1, 35, -1, 13, 13, 9, 9, 16, 27, -1, 11, -4, 8, 2, 18, 1, 0, -7, 1, -1, -2, -10, -9, 5, -1, 3, 6, 7, 11, -5, -16, -16, -4, 21, -5, -2, 16, 25, -6, -9, 10, 4, -3, 24, -16, -3, -4, -4, -4, 7, 1, -4, 3, 21, 30, 5, -18, -3, -7, 24, -37, -5, 0, -6, -2, 0, -1, -11, -14, -33, -26, -8, -13, 6, 7, -17, -34, -1, 4, 6, -11, -21, 4, -4, 9, -17, -10, -2, 1, 3, 11, 9, 2, 2, 8, -3, -6, -9, 3, 4, 1, -36, -23, 8, 10, 17, -1, 0, -16, -10, -3, 1, 5, -3, 4, 14, -2, 26, 8, -5, -2, -5, -6, -2, 11, -1, 2, 6, 4, 18, -5, 10, 12, 12, 24, 24, 18, 11, 9, 35, -4, -6, -4, 1, -8, 21, -5, -14, -4, -1, -5, -6, -12, 0, -1, 3, -29, -8, 14, 4, 12, -3, -9, 22, -9, -15, 5, 9, 14, 2, 1, -7, -29, 0, 7, -5, 2, 4, -9, -9, -24, -17, 8, -11, 0, 9, 0, -27, -4, 2, -7, 4, -4, -14, 5, -26, -14, 6, -6, 9, -32, -1, -3, -19, -23, -8, -10, 3, 1, -8, 7, 9, -24, -19, -27, 17, -23, 7, -4, -11, -7, 3, -4, 8, -3, 4, -6, -3, 12, -7, -4, -6, 13, 4, -7, -17, -26, 6, -5, -5, 17, 6, -1, -1, 15, -18, 5, -10, 20, 5, 2, 0, -6, 3, 0, -11, 2, 35, 2, 16, 4, -2, 7, 10, 30, -1, -2, 28, -1, 12, 2, -3, 9, 24, -3, -8, 2, 19, 9, 3, 36, 12, -7, -12, 17, 6, 1, -11, 2, -4, -10, 7, 3, 10, 36, -3, -3, 2, 4, -16, 37, 9, -8, -6, -12, 18, -8, 28, -9, 35, -5, -3, 8, -2, -7, 14, 7, 2, 7, -5, 7, 6, -2, -9, 11, 28, 4, -5, 0, -22, -3, 8, 6, -4, -13, 6, 6, -2, -2, -9, 12, -29, 32, 0, 1, -3, -9, -4, 0, 5, -4, 8, -3, 10, -6, -11, 7, -8, -4, 8, -7, 11, 6, 12, 3, 2, 7, 8, -2, 0, 8, -6, 6, 3, -31, 5, 16, -2, 2, -32, 4, -10, -11, -3, 12, 30, -8, 3, -10, 35, 13, -11, 2, -4, 2, -26, 48, 15, -1, -5, 0, 20, -8, 26, 27, 24, 30, 20, 39, 6, 0, 59, 39, -2, 2, -1, -4, -13, 5, -17, 2, 15, 23, -23, -12, 0, -5, 11, 32, -4, 12, -1, -6, 3, 6, 4, -1, 25, 13, 3, -9, 5, 2, -21, 5, 9, -9, 2, -10, 8, -1, 10, 15, -8, -9, -21, -2, -5, 1, 17, -15, 2, 2, 0, 2, 0, 1, 1, 9, 31, 3, -9, 5, 7, 6, -1, 3, -2, -2, 5, 3, -8, -2, -25, -12, 5, -4, 2, -3, -16, -1, 23, -2, 1, -3, -9, 5, 5, 7, 5, 1, -27, 14, 0, -20, -9, -10, 6, -23, -11, -3, 0, 1, 10, -10, -8, -12, -5, 18, -3, -20, -7, 1, -2, 30, 6, -14, -9, -1, -3, 3, 20, 4, 17, 7, 13, 31, 12, -4, 23, 17, -7, 6, 1, -2, 8, -8, 6, -3, 31, 1, -6, 30, -7, -1, 12, -8, -6, -2, -4, -7, 40, -6, 15, -14, 47, 38, 11, 10, 2, -8, -14, 23, -1, -11, 7, -5, 16, 1, -6, 9, 42, -8, 1, 11, 14, 4, -26, 1, 10, 6, -11, -6, 3, -2, -23, 3, 11, -7, -5, 19, -6, -8, 20, 15, -7, -7, 6, 5, -1, 2, -6, 1, 18, -12, -17, 6, -8, -5, -6, 20, 5, 2, -9, -5, 14, -7, 0, 5, 30, -3, -2, 4, -11, -10, -12, 17, -4, -3, -7, -10, 46, 5, 3, 17, -4, -26, -4, 14, 3, -7, 0, -17, 3, -4, 6, 6, 22, -3, -9, -7, 25, 7, -4, 28, -4, 3, 21, 32, 1, 4, -11, 4, 44, 9, 18, 30, 34, 45, 23, 24, 11, -5, 75, 31, 9, -7, 2, 6, 6, 6, -19, -5, 28, -6, 11, 6, 8, -2, 10, 13, 2, -3, -10, -7, -5, -1, -8, 13, -13, -3, -3, -3, 2, -14, -14, -8, 9, -7, -2, 4, 7, -2, -3, 0, 37, -20, -7, -1, 7, 7, 13, 10, 7, 4, -6, -6, 8, -2, 3, -1, -10, -6, -2, -2, -8, -1, -6, 6, -6, 1, -9, 5, 12, -7, -16, -30, -25, -34, -21, -9, -11, -3, -2, 5, -2, 1, 3, 1, -5, 4, -9, -34, -28, -32, 3, -41, 3, 1, -43, 4, 1, 1, 6, -7, -6, -7, -4, -12, 13, 9, 6, 18, 4, 0, -2, -14, -3, -3, 5, 5, 28, -15, -6, 10, 34, 24, 7, 17, 9, 5, -6, 13, -4, 16, -8, 4, 4, -14, -7, -9, -8, 4, 5, -4, 11, 0, -22, 12, 4, 5, 5, -4, 18, -1, -4, -2, 10, 14, -2, 8, -9, -7, -19, 12, 5, 5, 2, -10, -10, -4, 4, 6, -10, 12, 0, -17, 2, 2, 3, 18, -3, -6, 1, -10, 2, -2, -19, -8, -3, -12, 3, -2, 15, -6, -10, 24, 7, -5, -7, -8, -9, 6, -14, -11, 14, -14, -6, 11, 4, 7, 2, -2, -12, 2, 0, -15, 25, 1, -3, 3, -16, 0, 0, -4, -2, 3, -33, 5, 3, 0, -9, 1, 4, -18, -12, 4, -28, -25, -10, -8, -13, -6, 0, 20, -3, 7, 9, -5, 17, 8, 20, 19, 22, 18, 5, 33, 1, 0, 26, 52, 17, -2, -8, -3, 33, 5, 21, 44, 38, 3, 9, 35, 13, -6, 51, 18, -1, 1, -8, 7, 9, 3, 1, -6, 0, -4, -9, -4, -8, 4, -32, -8, 7, -6, -8, 2, -9, -5, 3, 0, -6, -5, 3, 31, -3, 10, 16, -58, 6, -2, -13, 7, 10, -6, -20, 0, -26, -9, -6, 8, 12, 4, -7, -18, 4, 12, 8, -9, -27, -6, -22, -15, -15, 11, -3, -6, 9, 7, 7, -9, -1, -10, -1, -7, -33, -2, 0, -14, -26, -21, -1, -41, -7, -10, -26, 31, -4, 0, -6, -3, 4, 7, -28, -6, 10, -10, 4, -7, 2, -7, -6, -12, 3, -1, -8, 2, -9, -8, 4, 2, -25, 4, -10, -2, 13, 4, -11, 4, 0, -8, -13, 8, 21, -15, -15, -2, 12, 7, 14, -10, -4, -3, 6, 12, 9, 1, -8, 0, -12, -6, -10, -7, -23, -15, 13, -20, -14, -6, -2, -25, -2, -9, 9, -5, -7, -7, 1, 3, 6, 20, 11, -7, 5, 1, -19, 5, 5, -1, -5, -9, 9, -9, -4, -11, -17, -33, 14, -8, 2, -5, 11, -6, -10, 1, 1, -15, -10, -2, 3, 0, -36, -15, 31, -18, 1, -2, -42, -3, -2, -6, -5, 1, -17, -3, -7, -15, -20, 9, 4, -6, -1, 6, 9, -27, 8, 11, 9, 3, 25, 4, -10, 5, 6, -4, -5, -7, 6, 4, -3, 7, -9, 4, -11, -11, -22, -2, 7, -4, 6, -27, -4, -17, -16, -5, -9, -16, -8, 2, -2, -4, 44, -1, 22, 5, 19, 16, 0, 28, 10, 13, -6, 19, 15, -10, -10, -11, 15, 10, 20, 53, 21, 10, 27, 34, -1, -14, 34, 30, -6, 2, -3, -3, 14, 7, -10, -16, -12, 23, 0, -6, -6, -2, -14, 16, 4, -1, -9, 1, -17, -13, 18, -3, 16, -8, -14, -29, -2, -7, -4, -7, 2, -10, -1, -2, -22, 3, 17, 13, -16, -30, -11, 7, -7, -10, 20, 4, 1, -1, -4, -7, -19, -12, -1, 14, -48, -42, -1, -46, 0, 2, 3, 2, 9, -14, -3, 4, -49, -17, -5, -10, 5, -12, -9, -39, 14, -2, 7, -3, 5, -10, 11, -4, -11, 0, 5, -5, -5, 1, 2, -5, 2, -5, -5, 9, 7, 7, -1, -5, 6, 1, 0, -6, -23, -49, -7, 5, 2, -9, -2, 10, -4, -3, -5, 3, 6, 7, 8, -12, -1, 1, -18, -12, 1, 3, 6, -13, -6, 10, -4, 2, -32, 4, -15, 0, -4, -20, -2, 11, -13, 5, 0, -5, 4, 2, -2, 3, 8, 13, -4, -4, 16, 2, 3, -11, 9, -2, 2, -13, 7, -6, 6, -6, -20, 5, 1, -22, -10, -40, 10, -25, 1, 6, -8, 1, 2, 10, -4, -4, -13, -9, -12, 3, -47, -42, 8, -7, -10, 7, -5, -15, 1, 5, 0, -18, -53, -6, -21, 0, -11, 15, 2, -7, 0, -3, -16, 8, -12, 0, -3, -7, -18, 3, -14, 5, 33, -4, 0, 18, -13, 1, 18, -13, 6, -6, -2, -3, 56, -9, 12, -1, -25, 41, -1, 19, 4, -11, 19, 9, -10, 7, -2, -6, 2, -8, 10, -4, 35, 21, -4, 22, -6, -10, -1, 46, 3, 6, 2, -6, 18, -10, 5, 22, 48, 58, 22, 38, 7, -12, 59, 11, -1, 4, 2, 1, -14, -6, 7, -5, -26, -8, 12, -17, 3, 4, -21, -36, -2, -7, 8, 8, 3, 8, 0, 13, 32, 39, -7, -4, -12, 5, -19, 0, 2, -9, 0, 2, 8, 0, 13, 11, -34, -9, -5, 1, 4, -14, -1, -22, -12, 5, 1, -4, -16, -16, -1, 11, 18, -7, -1, -11, 3, 2, 25, -10, 0, 22, 1, 10, 4, 4, 2, -16, -12, 19, 1, -25, 14, 1, -6, -14, 7, -9, -2, -8, -13, 1, -3, 6, -7, -21, -6, -9, 4, -12, 4, -13, -4, 10, -9, -5, -8, 0, 19, -2, -33, 30, -1, 5, -11, 3, 12, 8, 8, -1, -4, 10, -4, 4, -11, -6, -19, 12, -15, -8, 5, -1, -5, -2, 2, 2, 3, 3, 11, -2, 9, -2, 2, 0, 0, 30, 15, 0, 23, 2, -6, 3, 6, -9, -9, 6, -1, -7, 33, 17, 7, 7, 2, -5, 24, 14, -6, -6, 3, -3, 1, 3, 7, -13, -20, 22, 3, -7, 3, -2, -3, 20, -2, -7, 7, -2, 12, -4, 4, 21, -6, 3, 1, 11, -2, 14, 4, 2, 3, 9, -7, -1, -11, 7, -11, -10, -16, -5, -2, -6, -1, 2, 8, -7, -2, 4, -7, -14, 17, 1, 16, 8, 21, -4, -2, 2, 9, -11, 39, -6, -5, -9, -13, 10, 24, 0, 7, -3, -3, 11, 9, -4, -8, -5, -4, -17, 3, 1, -8, 3, 19, -5, 36, -2, 21, 15, 33, 7, 13, -17, -4, 8, -5, -2, -10, 3, 24, 2, 33, 17, 41, 33, 27, 26, -9, 4, 33, 8, -3, -3, 0, -4, 13, -2, -1, 14, -7, -5, -12, -19, 9, 2, -23, -11, -4, -1, -7, 2, 8, -4, 13, 7, 29, 25, -7, 5, 7, 0, 28, 3, -5, 18, -7, -2, 13, 1, 7, 8, -20, -8, -4, 0, -10, 12, 15, -12, 2, 4, -8, -8, -65, 2, -2, 12, -42, -16, -13, -15, -7, -7, 6, 5, -5, 0, 0, 6, -28, -10, -5, -19, 14, -3, 8, -30, 15, 15, -47, 26, -1, -3, -13, -11, 30, -7, -24, -15, -4, 6, 0, 1, 3, -8, 16, -19, -5, -5, -7, 7, -4, 3, 5, -8, 23, -3, -10, 14, -1, 8, -12, 44, -3, 7, 3, -7, 7, -4, 6, -3, 19, 24, 17, -33, -2, -8, 1, 18, 4, 5, -6, -15, 7, -11, 9, 2, -2, -4, -2, -2, 4, 3, -4, -4, -7, -3, -3, 1, 40, 7, -12, 2, 7, 3, 4, -4, -7, -5, 0, 1, -11, -1, 4, -8, -2, -12, -17, -1, 6, -39, -9, -2, 5, -6, -24, 0, -4, 4, 0, -7, 8, -9, 3, 4, 6, -13, 15, -18, 1, 6, 10, -18, -13, 7, -13, 5, -26, 0, -3, 14, -33, 0, -5, 15, -7, 5, 0, -8, 3, 6, 9, 0, 17, -1, 6, 18, 6, -13, 7, 10, 4, 1, 4, -9, 5, -6, -4, -10, 4, 1, 16, -13, -3, 3, 0, -15, -7, -11, -2, -27, -5, -5, -10, 2, 28, -3, -2, -15, 31, 29, 4, 24, 2, 2, -36, 29, -1, -8, 1, 0, 25, -5, 26, 32, 48, 45, 42, 29, -5, 4, 66, 1, -3, 1, 2, 3, 6, -2, 11, 21, 6, -23, 7, 15, 8, -11, 6, -2, -3, -15, 4, 9, -1, 0, -5, 5, 22, -7, -5, 25, 8, 2, 38, -36, -2, 9, 3, 11, 10, -6, 4, 22, 15, -33, 22, 14, 6, -4, -21, 24, -8, 0, -15, -3, 31, -9, 9, 3, -14, 0, -24, 8, -18, -9, -8, 3, -2, 5, 8, 1, 4, -3, -2, 0, -6, -8, -5, -10, 13, -11, -21, 1, -6, 7, 0, -6, -1, 1, 12, 7, 26, 17, 1, -2, -15, -4, 8, 16, -12, -11, 4, -12, 18, -17, -3, -6, 41, 44, -13, 7, 1, -13, 6, 12, 6, -1, 7, 2, 6, -1, 11, 11, 50, 28, -9, 14, -8, -11, 0, -1, -3, 2, -6, 9, 20, -18, 5, 1, 16, -9, -10, -24, -6, 1, 25, -3, -5, 1, -10, 0, 6, 4, -3, 6, 17, 15, 13, 5, 2, -6, 4, 6, -2, 16, 4, 4, 24, -12, 12, 3, 8, 4, -10, 11, -3, 0, -20, 13, 4, 6, -8, 10, 1, -4, 6, 3, 24, 37, 15, 18, -2, 0, -12, -7, -6, -4, -5, 9, 23, 2, -12, 6, -7, 14, -8, -4, 7, -6, -1, 3, -7, -5, -11, 3, 22, -3, -6, -2, 13, 6, 9, 6, -1, -4, -18, 29, 2, -13, 4, -3, 6, -2, -7, 12, -19, 5, -6, -22, -19, 15, 36, 14, -3, -5, -12, 10, 3, 5, 4, -23, 28, -35, 0, 1, -9, 0, -60, 14, 9, -3, 7, 0, 29, -5, 35, 1, -6, 45, 11, 25, 1, -8, 20, 37, 2, -6, 1, -1, -5, -4, 10, -3, 9, 10, 5, 10, -2, 2, 19, 6, 8, -4, 7, 6, -13, -2, 9, 2, -28, -17, 0, -36, -13, -8, 16, -5, 1, -3, -10, 10, -5, -4, -17, 3, -14, 0, -7, -23, 6, 0, 3, -6, 1, -5, -2, -2, -15, 0, -19, 1, 4, -22, -8, -45, 3, -10, -23, 6, -14, 7, 1, -7, -24, 5, -14, -11, -38, -22, 20, -18, -2, -8, -33, 8, 11, -1, -1, -3, 8, -10, 10, -11, -3, -21, 7, 27, -8, -7, -14, 8, 0, 8, 3, -3, 22, 5, 1, 10, 0, -1, 6, 14, -11, 5, -5, 2, -7, -6, 5, -6, 2, -12, 5, 2, -10, -1, -1, -9, 12, -3, -7, 28, 0, -3, -4, -6, 10, -4, -12, 3, -26, -14, 7, -6, 4, 1, -3, 10, -4, -6, -4, -4, -21, 1, 17, -9, -23, 13, 11, -14, 1, -1, 19, 5, -1, 22, -1, -5, -32, -7, -7, -14, -36, -18, -10, -18, -1, -8, 2, -6, -2, 10, -1, -15, -3, 8, -11, 1, -18, 0, -10, -19, 13, 4, -15, -22, 0, -11, -7, -1, 15, -5, -9, -15, -18, 12, -14, -9, -1, -2, -26, -12, 0, 3, -1, -2, 3, -1, -3, 1, 0, 15, 3, -6, -4, 3, -1, 11, 1, -7, -10, 6, 10, 15, 7, -9, 22, 6, 3, -18, -9, -1, 3, 22, 0, 0, -3, 4, -29, -1, 0, -45, 12, -11, -7, -8, 11, 8, -31, 17, -2, -14, 1, -6, 27, 5, 4, 27, 19, 8, 29, 7, 5, -9, 22, 17, -9, -9, 1, 4, 9, 6, -13, -3, -17, -3, -15, -11, 4, 3, -19, 19, -1, 3, -9, 4, -18, -4, -6, 7, -1, 14, -6, 26, -4, 2, 4, -2, 7, -5, -2, -8, -23, -3, -27, -17, -48, 19, 5, -20, 8, 1, -1, -4, -2, 5, 8, -5, 0, -7, 16, -10, 11, -13, -17, -18, 10, -8, 11, -18, 2, -7, -1, 16, -21, -8, -2, -7, 3, -7, 2, -11, 16, -8, -17, -5, -9, -7, 3, 6, -3, -6, -1, 0, -5, 7, -14, -16, 5, 3, -29, -7, 0, 7, 8, 6, 7, -6, -10, 4, 16, -19, -2, 3, -10, -4, -7, -4, 5, 7, -4, -4, -14, 6, -17, 5, 16, 11, 0, -13, 4, -8, -7, -2, 4, 16, 0, 7, -1, -1, -7, -10, -19, 3, 1, -24, -2, 8, -6, 2, 2, -9, -11, -3, 30, 10, 0, -16, -15, -13, -8, -21, 2, -4, -9, -11, 6, 0, -8, 5, -7, 4, -29, 6, -15, -6, 10, -27, -15, 3, -19, 13, 5, 1, -1, -7, 18, -7, 3, -4, -18, 9, -4, -12, 6, -2, -20, -30, 6, -3, -13, -2, -14, -6, -6, -9, -3, -3, 11, -12, 17, -15, 10, -3, 2, 2, -6, 4, 1, -7, -11, -11, 17, 30, 1, 13, -7, -5, 7, 3, -5, 3, -7, -3, -5, -14, 10, -12, -22, -4, -1, -24, -9, 5, 10, -9, 2, -7, -1, 2, -17, -9, -29, -11, 17, -19, -3, -19, -11, 11, -79, 13, 0, 4, 6, 1, 23, -6, 22, 1, 43, 0, 10, 30, 15, -7, 10, 23, -3, 1, -5, 3, 7, 0, 11, 4, -48, -15, -1, 23, 3, -3, 13, -5, -10, -2, -1, -5, -7, -1, -9, 10, -8, -68, -6, -24, 13, -1, 5, -6, 0, -6, 4, 7, 12, 3, -1, -2, 30, 22, -3, 2, 5, -4, 6, -41, 1, 4, 12, 9, 12, 2, 7, -5, -1, 14, 1, -4, -4, -10, -1, -1, 2, 11, 7, 10, 19, 8, -4, -10, -8, -10, 12, -14, 4, -3, -25, -6, -5, 9, 0, 4, -9, 4, 5, -9, 6, 5, 0, -4, 1, -5, 1, -13, -4, 0, -7, -1, -10, 1, 14, -7, 32, 41, -22, 20, 7, -9, 0, 0, -11, 4, -7, 1, 26, -11, 8, 10, 20, 6, 10, 32, 4, 5, 28, 30, 0, -12, 1, 7, 3, -6, -8, -2, -9, -27, -6, -6, -18, 3, 8, 14, 0, 3, -6, -16, -7, -13, 4, -1, 31, 16, 1, 24, 14, -3, -5, 8, -8, -5, 7, -4, 39, 0, 0, -5, 4, -9, 14, 13, -4, -10, 10, 9, 5, 1, -2, -3, 21, -14, 4, -14, 15, -11, -12, 17, 7, 6, 25, -1, -4, -4, -4, 3, 23, -17, -1, 14, 6, 13, 1, 13, -5, -9, -18, 13, 3, -1, 1, 6, 2, -8, -7, 7, 10, -4, 1, 1, 6, -10, 4, -1, 0, -2, 0, 2, 12, 4, 5, 15, 15, 23, 6, 15, 11, 5, 4, 17, -3, -1, 3, 9, -24, 12, -26, -7, -6, -3, -14, -18, 20, 4, -15, 7, -12, -2, 12, 9, 2, 1, 26, -10, 10, -7, -5, 42, 0, -8, -15, 1, -2, -6, 1, -1, 14, -3, -25, -11, 7, 2, 10, -14, -18, -11, 29, 15, 2, 6, -7, 8, -23, -1, -8, 14, 5, -1, -4, -3, 2, -2, 4, -2, -7, -9, 4, -1, -7, -2, -16, 0, 9, -10, -10, -35, -2, 7, -24, -13, 0, 9, 8, 10, -16, -2, -3, 6, -7, -37, 3, 4, 5, 1, 6, -17, -4, -1, 2, 5, -3, -3, -27, -8, -18, 8, 5, 1, -6, 2, -11, -21, 0, -6, 11, -6, -13, -12, -15, -3, 4, -14, -13, 9, -6, -2, -23, -6, -4, -8, 9, 8, 6, 3, 17, 7, 41, -4, -2, 27, -5, -2, 10, 42, -1, -4, -2, -9, 41, 3, -8, -11, 33, 17, 8, 26, 0, -2, 54, 21, 3, -6, 0, -1, 30, -2, 2, -5, 47, -20, -4, -13, 1, 0, 9, 30, 6, 7, -9, -3, -3, 8, -22, -7, 19, -6, 7, 2, -1, 4, 10, -14, 1, -3, -5, 4, -33, 0, 1, -2, -22, 13, -5, 17, 4, -3, 3, -3, 3, 7, 10, 5, 11, -4, -2, -1, -13, 6, -10, 3, -2, 2, 5, 7, -3, 4, -14, -7, -6, 5, 2, -5, -7, -32, -1, -29, 0, 1, 23, 7, 3, 0, -9, -6, -42, -15, -2, 1, -12, -17, 0, -17, 5, -10, 13, -19, 6, -2, 4, 9, 19, 0, -3, -11, 45, -5, -2, 14, -5, -11, -17, 10, -8, -1, 0, -1, -12, -7, -22, -37, -1, -8, -14, -22, -8, -1, -43, 20, 6, -2, 3, 6, -11, -3, 5, 10, -14, -23, -5, 4, 7, -2, 14, 22, -4, 7, 7, -7, -27, 13, 13, 7, -32, 14, -12, -16, -1, 7, 12, 11, -9, 10, -3, 6, -35, -11, -10, 17, -26, 12, -14, -22, 16, 15, -10, -8, -4, -1, 0, 10, -19, -3, -6, -6, -29, -36, -10, 12, 15, -7, -20, -31, 12, 3, 2, -4, 24, -8, -4, -8, 7, -4, -8, 1, -3, -6, 22, -13, -3, 5, -6, -10, -25, 5, -4, -14, 2, 14, -6, 5, 4, 6, -4, 20, 1, 9, 1, 1, 14, -15, -12, 11, 15, 71, 15, -3, 3, -14, 27, 29, 2, 6, -1, -4, 13, -3, 0, 12, 15, 4, -2, 28, -4, -6, 1, 8, -5, -1, -2, -5, 6, -3, 7, -11, 5, 1, -8, -18, 0, -4, -32, -9, -4, -4, -14, 7, 2, -9, -7, -1, -8, 1, 4, 0, -2, -15, 16, 15, 0, -14, 10, -2, 8, 4, 11, -11, -3, 18, 7, -13, 2, 0, -36, 11, -1, 4, -11, 1, -4, -7, -6, -2, 1, 2, -5, -26, 5, 9, 13, 10, 7, -1, 2, 4, -18, -10, -5, 0, -8, -1, 12, -11, -3, 1, 2, 6, -9, -2, 11, -8, -3, 5, -3, 0, -36, -10, 7, -15, 7, 1, 9, -12, -6, 11, -2, -3, 3, -10, -2, 5, -30, -19, 1, 6, -6, -3, -18, 0, -7, -11, -9, 1, 10, -10, -2, 9, 2, -3, -6, 18, 8, -10, 1, -19, 3, 2, 3, -3, -41, -1, -42, -33, -80, -29, 2, -59, 21, -1, -27, -48, 9, -5, 12, -4, -28, -6, -8, -23, -43, -11, -3, -10, -7, 1, -10, 11, -1, 11, 9, 8, -22, -8, 1, 13, -72, 10, -6, 12, -1, 1, 4, 15, -1, 5, 7, -10, -20, -3, 12, -14, -7, -8, -18, 3, 2, -3, 23, 5, -2, 1, -4, 3, 14, -15, -22, 5, -2, -1, -16, 9, -13, -6, -2, -9, 13, 4, 9, 4, 6, 7, 19, 1, -29, 28, -7, 27, 10, 9, 14, 0, 8, 3, 1, -10, -6, -2, 30, 2, 5, 39, 4, 16, 0, 0, 4, 5, 2, 2, -3, -1, -1, -7, 18, 8, 41, 16, -2, 55, 2, 4, -28, 18, 1, 6, -2, 6, 36, -2, 13, 29, 52, 42, 20, 27, -11, -5, 45, 34, 2, 8, 0, -13, 9, -7, -5, 8, 12, 16, 7, -7, 3, -2, 9, 7, -1, 0, -7, 5, 23, -7, 1, 5, 20, -3, 11, -10, 2, 3, 22, -7, -2, -2, 2, -10, 15, -4, 5, -3, 19, 0, -7, 15, -9, -5, -10, -6, -1, 6, -2, 1, 1, -10, 3, -10, 23, 38, 1, 0, -4, 1, 20, -5, 6, 1, 5, -12, 7, -6, -10, -12, 23, -2, 13, -19, 3, -3, -5, -6, -2, 2, -4, 0, -13, 4, -8, -9, 15, 1, -18, 6, 5, 0, 6, -14, 0, 0, 5, -7, 31, 0, 2, -2, 46, 8, 14, 14, -1, -5, 12, 14, 7, -7, 3, 8, -1, 8, 17, 24, 10, 27, 0, 6, 4, -5, -19, 19, 3, 5, 5, -11, -63, -8, -59, -31, -87, -74, -19, -48, 7, -4, -20, -45, -5, -5, 12, -4, -46, 1, 1, -32, -9, -27, -19, 3, 2, -6, -14, -19, -9, -1, -1, 6, -13, -7, 6, 7, -20, -15, -4, 9, -4, -3, 3, -16, 1, 7, -3, -5, -6, -7, -2, -7, -25, 1, -3, -11, 2, -3, 27, -2, -1, 0, -2, -2, -39, -9, -2, -1, -44, -4, 2, -3, -3, -6, 21, 7, 5, 2, 6, -9, -10, -9, 2, 12, -49, -3, -7, -11, -11, 0, 5, 8, 8, 3, 7, -2, 9, -10, -15, 7, 19, 12, 15, 7, 2, 5, 13, 17, -8, -4, -7, -1, 9, 10, 13, -3, 39, 39, -7, 33, -8, -12, 5, 11, -3, -1, -9, -10, 10, -2, 16, 8, 28, 25, 15, -1, -11, 9, -7, 4, -4, 7, 7, 4, 0, 4, -2, 0, 9, -2, 12, 24, 10, -8, -19, -3, -1, 0, -1, 2, 25, -7, 4, 12, 13, 18, 0, -20, -1, 11, -5, -5, 3, 1, 0, 5, -2, 0, -2, -3, 8, 10, 3, 8, 4, 10, -9, 7, 6, 7, -6, -4, 1, -4, 6, -15, 8, 12, 15, 0, 10, -17, -13, 4, 0, 1, -6, 3, -4, 5, 3, -9, 9, -16, 2, -16, -2, -12, -1, -13, -6, 7, -8, 3, 25, -10, -7, 10, 7, 11, -4, -8, -4, -9, 0, 11, 4, -6, -12, -3, 5, 2, 5, 18, 5, 0, 0, 5, 2, 4, 16, -3, -9, 7, 2, 4, 19, 7, 8, -6, -9, -6, 2, -5, 1, 1, -19, 16, -12, -11, -9, 7, -86, 0, -61, -8, -68, -55, -21, -55, 4, 13, -26, -83, 1, 5, 5, -4, -93, 6, -15, -18, -100, -64, -15, -48, -11, 9, -58, -58, -3, -4, 2, -14, -53, -1, -13, -9, -88, -22, -13, -34, 0, 6, -19, -34, -12, 1, 8, -3, -39, -5, -20, -20, -80, -30, 5, -23, -14, 4, -21, -52, 1, 11, -2, 0, -18, -11, -16, -7, -28, -13, 0, 3, -7, 1, -12, -16, 1, -14, -1, -3, -24, 3, -10, -11, -27, -17, 1, -9, -10, -9, 1, -14, 12, -9, 4, 4, 14, -13, -5, 8, 11, -4, -8, 9, 2, 5, 1, 8, -5, 13, 1, -5, 0, -6, -8, 8, -12, -28, 2, -6, 3, -3, 6, 7, -7, -3, -12, 2, 7, 1, -5, 1, -26, 28, -8, 8, 3, 0, 27, -4, -11, 2, -9, 6, -17, -1, -17, -4, -16, 0, 6, -14, 2, -1, -15, -5, -2, 0, 0, 7, -33, -4, -28, -16, -21, -9, -2, -5, 3, 0, -7, -6, 3, 7, 0, -7, -7, 6, 1, -16, -17, -25, -1, -12, 2, -7, -21, -11, -2, 6, -2, -5, -14, -6, 3, -16, -14, -20, -6, -25, 15, -9, -9, 6, -7, 4, -2, -1, -20, 12, 7, 3, -11, -6, -3, -7, -3, -5, -3, -6, -2, 5, -5, 5, -2, -14, -1, -1, -2, -10, -10, -6, -6, -1, 1, 1, -4, -10, -2, 4, 5, 0, -7, -10, -3, 5, -4, 15, -3, -5, 10, -6, -3, 1, -13, -2, -1, -9, 0, -9, 1, 9, -10, -4, -5, -4, -5, 5, -10, -14, -8, -6, -90, 10, -45, -34, -64, -84, -15, -102, 11, 16, -35, -72, 0, 3, 16, 4, -55, 6, -33, -32, -33, -80, -16, -21, -1, -15, -19, -54, 0, -8, -5, 9, -56, -15, -23, -8, -79, -61, -17, -25, 1, -5, -24, -27, -8, 5, -6, -3, -46, -12, -7, -21, -59, -35, 4, -29, 4, -3, -21, -36, 4, -10, -12, 10, -26, -3, -1, -10, -47, -17, -4, 3, 4, -8, -8, -21, -2, -7, -4, -6, -34, -3, -12, -18, -3, -39, -1, -11, 3, 3, -3, -2, 6, -8, -9, 0, -16, 11, -2, -11, -44, 17, -7, -13, -3, -10, 4, -1, -9, -2, -10, 1, -6, -7, 2, -3, 7, 2, -6, 0, 0, 5, -15, -9, -1, 8, 4, -10, 1, -4, 5, -17, 15, -16, -10, 4, -1, -2, 0, -17, -13, 6, 0, -1, -24, -7, -8, 0, -35, -10, 2, -14, -18, -10, 8, -14, 3, 4, 11, -5, -19, -4, -3, 0, -57, -2, 1, -6, 4, -3, 20, -10, -7, -2, 5, -5, -19, -3, 2, -12, 16, -6, -5, -13, -4, 1, 3, 3, -5, 5, 5, -4, 0, 1, -9, -10, 4, -20, 1, 8, -1, -3, -2, -4, 3, 9, 1, -8, 23, -3, -10, -5, -33, 14, 13, 5, 10, -1, 1, 8, -3, 3, -3, 1, -13, -2, -7, 2, 16, 4, 5, 11, -1, 3, 5, -19, 7, -1, -7, 1, -7, -2, -20, 3, 20, 0, 2, 6, -4, -4, -2, 1, 2, -14, -3, 5, 12, -7, -5, -5, 1, -7, -11, 0, -4, -7, -8, 3, 10, 2, -9, -5, -96, -6, -50, -28, -95, -40, -46, -70, 1, 3, -66, -57, -11, 0, 19, 16, -46, -11, -20, -16, -79, -60, -1, -18, 7, -10, -27, -62, -4, 2, 6, -5, -46, 4, -14, -23, -49, -38, 8, -45, 2, 1, -2, -45, -2, -3, 16, -4, -43, -2, -21, -11, -59, -61, -8, -3, 2, -10, 3, -21, -7, 5, 6, 2, -27, -9, -10, 3, -41, -37, -2, -12, -4, -9, -13, -31, -1, 8, 5, -1, -28, 3, -15, -9, -30, -37, -3, -15, -9, 15, 0, -21, 10, 1, -8, -17, -17, -12, -1, -8, -49, -4, 5, -15, 1, -7, 4, 0, -7, 8, 1, -1, -35, 1, -6, -10, 1, -15, -1, -13, 3, -8, -10, -5, -11, -5, -5, -9, -25, -1, 6, -3, -20, 4, -2, -10, 6, -12, 8, 3, -5, -5, -7, -2, -23, -11, -1, -13, -28, -18, 1, -14, -10, -5, -10, -12, -5, -9, -10, -3, -20, 1, -18, -12, -23, 3, 10, -3, 16, 4, 6, 3, 1, -1, -7, 12, 3, -7, -5, -5, -7, -1, -7, -14, 7, -4, 7, 11, -4, -3, 4, -9, 4, -12, -7, 8, -9, -2, 0, 4, -3, 6, 15, 7, 2, 1, -2, -2, -29, -5, 8, 9, -22, 14, -9, -4, 9, 2, -3, -20, 2, -11, -7, 5, 2, -4, -8, -12, -11, -4, -1, 4, 13, -6, 9, -25, 11, -1, 0, 2, -11, -1, -10, -12, 24, -8, -7, 4, 3, -3, 10, -13, -6, -3, -6, -2, 13, -1, 9, -4, -4, 12, -2, -1, -15, 3, -4, 1, -3, -1, -2, -13, -93, 4, -57, -36, -121, -76, -5, -96, -10, 11, -44, -44, 0, 5, 6, 16, -65, -6, -16, -25, -49, -20, -8, -8, 3, -4, -16, -31, -4, -6, -1, -9, -28, 0, -8, -7, -47, -38, 0, -2, 1, 2, -28, -3, 0, -9, 0, -3, -50, -7, -3, -28, -82, -39, -7, 0, 2, -8, -12, -24, -2, -4, 8, 5, -54, 7, -16, -4, -26, -28, -5, -17, -5, -8, -3, -21, 3, 0, -4, -9, -30, -13, 2, -25, -11, -13, -8, -1, -7, -10, -14, -16, 0, 10, -12, 6, -16, -3, 6, -11, 5, 1, 0, -3, 0, -1, 9, -16, 1, 18, 1, -8, -7, -6, -14, -9, -4, -9, 0, 9, 0, -3, -1, 0, -4, -16, 1, 13, -17, -9, -16, -7, -11, -16, -3, 1, 5, -14, 22, -15, -7, 1, -3, -8, -2, -5, -12, 1, -22, -15, 3, -13, 2, 8, 9, -25, 7, 6, -5, -8, -34, -11, -13, -16, -25, -16, 1, 2, -4, -9, -36, -12, 1, -11, 7, 0, -23, -2, -4, -13, -26, -26, -14, 2, -15, 5, -8, 13, -3, 2, -4, 8, 10, 1, -7, 2, -20, -18, -8, -1, -5, 6, 1, -7, 7, 6, 2, 9, 17, -8, -6, 3, -10, -21, -11, -20, -16, -8, 15, -4, 2, -6, -8, -5, -5, 2, 4, -11, -14, -38, -5, -10, 11, -1, -14, 7, -5, 0, 7, -3, 7, -5, -10, -11, -6, 5, -12, 10, -5, -10, 7, -8, -5, -3, -4, -1, 23, -3, -7, -1, -16, -34, 7, 4, -4, 2, 15, 0, -4, 0, 1, 6, -90, -3, -57, -39, -123, -88, -6, -82, -6, 0, -63, -68, 11, 8, -2, 2, -49, -6, -10, 6, -36, -51, -13, -14, 1, -7, -22, -44, -1, -6, -9, -3, -47, 0, -21, -11, -46, -16, -2, -9, 5, 6, 0, 4, -3, 2, 8, 6, -41, 5, -22, -23, -30, -16, -8, -21, 5, 7, -28, -4, -6, 0, 1, -10, -52, -6, -14, -7, -17, -7, -9, -14, -8, -3, -11, -15, 4, 9, -3, -12, -26, -10, -13, -6, -12, -20, 0, -7, 10, 7, -8, -12, 4, -3, -3, 9, 5, -8, -14, -11, -20, 5, -10, -6, -2, -8, -8, -3, 0, 6, -7, 11, -15, 1, -6, -6, -8, -25, -1, -11, -10, -6, 0, -16, 9, -6, -5, -2, -20, -3, -9, -11, -19, -1, -4, 1, 2, -6, -2, -6, -4, 7, -14, 9, -17, -9, -6, -7, -27, -8, -2, -2, 3, 7, 1, -12, -3, 6, 12, 11, -19, -12, -8, -11, -3, -2, 4, -8, 6, -9, 7, -2, -4, 3, -4, 5, -13, 8, 7, -10, -8, -2, -4, -6, 10, 7, -14, -28, 6, 1, -6, -12, -11, -5, 0, -13, -19, 3, -3, 11, -3, -6, 7, -24, -6, 6, -3, 6, 3, 5, -10, -4, 36, -7, -14, -6, 12, -5, 20, 19, 3, -1, 0, -4, 16, 0, 2, -1, 30, -5, -14, -7, -6, 7, 14, -4, 3, 4, 4, -6, -6, -1, -7, 8, -33, 2, 1, -4, -7, -7, 4, -17, -2, -6, 0, 7, 25, 13, -23, -5, -36, 21, 2, 0, -10, 11, 12, 19, 0, -12, 0, -1, -90, 3, -72, -35, -47, -89, -51, -47, 5, 16, -65, -50, 6, -5, 14, 20, -25, 2, -26, -10, -33, -31, 0, -19, -1, -7, 29, -47, -16, -15, 9, -12, -49, 4, -27, -23, -29, -20, 3, -28, -8, 1, -39, 4, -6, 3, 11, -1, -38, -3, -10, 5, -38, -13, 5, -15, -1, 5, 2, -14, 4, -17, -1, -21, -22, -2, -22, 1, -33, -11, -7, 6, 2, -8, 0, -16, 2, 5, 13, 1, -8, 12, -15, -10, -43, 2, 0, -11, -5, -5, 15, -4, 9, 3, 4, -1, -12, -8, -2, -12, -8, 6, 5, -6, 10, 2, 14, -3, -1, -8, -1, -4, 14, -9, -13, 6, -12, -2, -1, -3, 5, -3, 2, 1, -4, 13, -4, -5, -19, -7, 10, -5, -15, 3, 10, -10, -7, -2, -3, 3, -8, 0, 0, 4, -3, -2, -10, -12, -23, -14, -4, -20, -2, 4, -30, -1, -2, -15, 3, 12, 8, -4, -9, -1, 9, 19, -2, -6, -15, -3, -7, 12, 7, 2, 1, 10, -10, -6, -4, -5, -13, -19, -3, -19, -6, -6, 13, 18, -7, -5, 6, 6, 1, -7, 3, -4, 32, 2, 6, 14, 4, 2, -2, 22, -2, 11, -4, 5, 18, -5, -1, 10, 37, -9, 2, -5, -16, 2, 12, 17, 11, -9, 1, -2, 16, 2, -2, 0, -31, -4, 4, 0, 5, -7, -5, 9, -6, -4, -9, -5, 6, -3, -5, -3, -29, -14, 10, 5, 8, 17, -4, -23, -13, -7, 3, 7, -17, -11, -5, -7, -3, -25, 0, -9, -8, 5, -5, 5, -3, -12, -7, -9, 
  23, -6, 19, -5, 25, -9, 7, 28, 7, 10, 1, 20, 7, 2, -3, -9, 20, -1, 16, 22, -2, 16, -7, 16, -1, 8, 18, -9, 0, -4, 2, 1, 6, -11, 6, -5, 10, 13, 5, -9, 5, 4, -28, 40, 3, 3, 4, 15, 30, 10, 8, 4, -7, 9, 3, 31, 15, -2, -4, 15, 3, -13, -3, 2, 29, 8, 4, -2, 28, 19, 15, 7, 1, -3, 38, 33, -8, 2, 0, 3, 12, 5, 10, 5, 21, 23, 6, 13, -10, -3, 11, 8, 0, 6, 12, -9, 0, 14, -9, 12, 12, 21, 11, 13, 7, 0, -29, 25, -11, -8, 10, 10, -4, -4, 11, -4, 1, -5, 1, -5, -2, 11, -3, -18, -9, -6, -2, -7, 1, 12, -15, 14, -8, -37, -4, -23, 19, 7, -30, 9, 0, 11, -9, 2, 5, -3, -9, 5, 15, 2, 15, -20, 13, 17, 11, 7, 4, -8, -1, -10, 19, 9, -1, 1, -53, -18, 5, -21, -12, -2, 2, -41, -7, 12, 13, -5, -12, 5, 6, -6, -9, -24, 9, -9, -4, 7, -13, 18, 3, 0, 3, -1, 8, 10, -1, -15, 33, -25, 2, 16, -7, -3, -7, 25, -3, 3, 19, 14, 10, 3, 7, -8, 28, 9, 1, -17, 0, 2, -12, 20, 6, -7, -4, -3, 2, 4, 2, 13, 28, 3, -6, 7, -6, 6, 16, -12, 5, -8, 5, 11, 15, 9, 1, 14, 5, 19, -5, 15, 3, 7, 12, 7, 9, 4, -7, -7, 12, 3, -1, 9, -9, -13, 3, -8, -11, 7, -36, 1, 4, 1, 3, 10, 4, -5, -9, -13, -18, -2, 1, 15, -7, -14, 40, 6, 3, -9, -5, -2, 2, -2, 10, -3, 36, -12, 5, 23, -7, -2, 3, -26, -3, -3, -4, 4, -15, -4, 10, 11, -8, -4, 8, 7, 5, -4, 1, -15, 10, -16, -10, 1, -4, 11, -16, -10, 36, -15, -7, 1, -9, -1, -16, -11, 9, 7, -2, 8, 5, 3, -1, 5, 30, 18, 18, 13, -6, -5, 4, 22, 0, -4, -1, -2, 31, 1, 14, -8, 44, 3, 0, 20, 10, -2, -9, 4, -1, 2, 4, -1, 20, -11, 12, -8, 20, -6, 5, 15, -2, -3, 22, 8, -4, -9, 7, -4, 7, 9, 15, 18, 34, 14, 9, 5, 11, -3, 5, 26, 5, -10, 4, 10, -18, 8, -18, 4, 2, 0, -3, -9, -11, 2, -22, -40, -3, 8, 13, -14, -35, 7, 16, -8, -4, -1, -4, -5, -13, 8, 6, 6, 2, -2, -2, 4, 33, -6, -7, 15, -27, 34, -2, 16, -6, 11, -3, 15, -5, 0, -9, -1, -6, 8, 2, -16, 15, 20, -5, 24, -5, 4, -26, -13, -1, 6, 7, -1, 14, -4, 3, 1, 2, 29, -8, -9, -4, -3, 16, 16, 3, 8, 3, 1, -24, 11, 10, 2, 6, -9, -4, 16, -8, 2, 22, -2, 7, 2, 1, 1, 18, -8, 11, -4, 19, 25, 2, 13, 5, -7, 0, 13, 13, -12, 14, -8, 5, 0, -11, 5, -8, 23, 5, 8, 7, 4, 9, 25, -3, 0, 10, -2, -16, 6, -6, 2, 1, 18, 10, -18, 7, 10, -11, -4, 9, 6, -8, 21, 7, 7, -21, -8, -18, -25, 8, -4, -4, 1, -1, 4, 0, -1, -5, -5, -10, -1, 0, -27, -5, -20, -3, 7, -4, 5, -17, -7, 2, 9, 7, 1, 0, 3, 9, -15, -6, 15, -12, 22, 3, 2, -22, 1, 4, 7, -10, -1, 18, 7, -6, 3, -4, 14, 1, 4, 4, 10, -11, -14, 7, 7, -1, -6, 20, 6, 4, -9, -28, 9, 1, -1, 1, 0, -24, 0, 3, 5, 0, -11, 20, 4, 9, 19, -22, 30, -4, 3, -9, 1, 19, 2, -2, -15, -9, 5, 25, -1, -10, 17, 32, 18, 3, 26, 22, -3, 10, 0, -5, 5, 11, 0, 1, -6, -5, -5, 48, 39, -2, -7, -3, 9, 4, 23, -12, 0, 8, -5, -12, 11, 5, -5, -38, -6, 7, 2, 0, 1, -14, -6, 0, -1, 0, 4, 0, -6, -18, -3, 0, 15, -9, 11, 18, 1, -3, 13, -1, -1, 14, 7, 4, 3, 2, 8, 29, -8, 1, 16, -3, 7, 3, 2, 10, 5, 8, -1, -27, -6, 7, 11, -2, -15, 5, 23, -2, -4, -4, -28, 0, 7, -6, -12, 16, 10, 0, -4, -32, -18, -2, -9, 0, 5, 21, 1, -2, 9, 6, -3, -5, -2, 2, 9, 9, 47, 10, 12, 0, 0, 26, 8, 0, 2, 4, 9, -8, 3, 19, -6, 12, -2, 9, 19, 9, 10, -12, 1, -18, 8, 11, 9, 22, 1, 1, 5, 17, 50, -10, 19, 9, -4, 1, 15, 0, -5, -4, 2, 21, 7, 8, 10, 32, 27, 1, -6, 4, -3, -13, 0, 6, 8, -2, 5, -13, -1, 5, 13, 7, -33, 2, -9, -11, 10, 4, -29, -11, 2, 5, -2, 8, -1, 0, 1, -43, -18, -4, -35, -11, 15, -11, 11, 5, 6, -7, 0, 1, -7, 3, -4, 11, -41, 0, -32, -2, 2, 1, -1, -9, -6, -3, 10, -11, -3, 11, 0, 23, 13, 6, 14, -9, 3, -35, 8, -8, -4, -2, -1, 24, -2, 0, 8, 23, 11, 9, 31, -10, 10, 2, -19, -11, 1, 14, 7, 30, -8, 11, 12, 44, 11, -8, 5, -4, 2, -9, 10, 0, -5, 2, 3, 32, -13, 16, 3, 12, 20, 3, 9, -7, -4, 11, 22, -6, 5, -1, -1, 7, 2, -2, -1, -31, 13, -8, 10, -11, 2, 5, 16, 0, 2, -7, -5, -34, -4, 6, 5, -69, -15, 5, -11, -5, 2, -30, -24, 1, 2, 8, -4, -21, -1, -9, 0, -27, -33, 0, 6, -9, 7, -45, -15, 7, -5, -10, -6, -37, 0, -18, -5, -17, -5, -18, -24, -1, -14, -8, -6, -4, -15, 5, 4, -1, -4, 0, 1, 6, 22, -2, 14, 2, -4, -2, -2, 2, 15, 9, -5, -15, 0, 9, -10, -31, -4, 10, -21, -8, -6, -19, 0, -4, -4, 6, 2, -1, -2, 0, 8, -23, -26, 9, 31, -1, 5, -15, 41, -2, -7, 4, -6, -7, 2, 4, 14, 27, 23, -4, 25, 5, 0, 3, 26, -10, 0, 1, 10, 22, 4, 1, -9, 20, 12, 7, -10, 4, -6, -13, -14, 10, 0, 15, 7, 20, -8, 8, -3, 35, 31, -9, -23, -10, 3, -2, 13, 9, -8, -6, -1, 2, -3, -11, -3, -20, -9, 15, -7, 1, -5, 5, -11, 0, 7, 2, 3, -6, -6, -5, -7, -16, -24, -8, -28, -9, -5, -40, -3, 1, 1, 5, 2, -17, 6, 23, 5, -7, -9, -6, 2, 4, 1, -8, 29, 11, -6, 0, 0, -6, -4, -14, -4, 22, -9, -14, -16, 2, -9, 8, 16, 10, 4, 12, 8, -16, -1, 2, 13, 13, -12, 7, 4, -2, -5, 18, 12, -12, 8, -5, 4, 20, 4, 21, 4, -2, 6, -1, 22, -2, -1, 26, 9, 3, 0, -12, 0, 4, 3, -5, 9, 7, 24, -7, 25, 0, 1, 20, 5, -17, 1, 7, -3, -12, 12, -8, -18, 7, 4, 3, -9, 4, 0, 7, 26, -17, 4, 7, -9, -1, -15, -14, -3, 16, -14, -3, -9, -2, -9, -5, 14, -3, -3, 14, 6, -40, 5, -19, -9, 0, -11, 1, -22, 5, -2, -27, -2, -13, 3, 2, -7, -21, 2, -6, 9, -22, -19, 2, -30, -2, 7, 7, -11, -16, 2, 9, -2, 11, 5, -7, -7, -2, -39, -4, 16, 1, -14, 6, -36, 1, 7, 5, 8, -13, 2, -21, 3, -26, 5, -11, -5, -9, 4, -7, -14, 2, -9, -4, -10, -2, -1, 0, -10, -20, -14, 4, -7, 13, 11, 2, -2, 7, 4, -4, -2, 6, -1, 13, -6, 21, -24, -4, -14, 1, 6, 3, 6, 7, 3, -1, 3, -17, 7, 7, -1, -2, 1, 2, 16, -16, 7, -3, -7, -6, 2, -6, 8, -7, -3, 5, -11, -10, 29, 0, -14, 1, -1, 27, -2, 4, 18, 6, -7, -34, 13, -8, 7, -28, -19, 9, -4, -2, 7, 30, -39, -19, 1, 10, 8, -21, 2, -27, -24, -21, -23, -16, -32, -2, 0, -47, -47, -6, 1, 1, 10, 6, -3, 23, 0, -10, -27, 24, 17, 11, 5, -3, -28, -4, -8, 6, 8, 5, -7, -6, 6, -29, -6, -4, 14, -12, -9, 16, -8, -1, 0, -8, 4, 4, -7, 4, -6, 12, 6, 25, 2, 7, -3, -16, 20, -10, 2, 13, -3, 2, 7, -4, -17, -27, -8, 7, -9, -20, -6, 3, -3, 2, 9, -4, 6, 4, 1, 15, 0, 2, 13, -5, 5, 12, 8, -29, 11, -1, -6, 6, 2, -6, 3, 4, 2, 27, -25, -10, 26, 1, -2, 4, 25, 2, -4, 4, 7, -12, 9, 4, 14, 10, -9, 3, 20, 11, -1, -13, -18, 4, 9, -4, -6, 4, 3, -29, -10, -25, -19, -22, -27, -13, -6, -20, -12, 8, -9, 2, -6, -11, -1, 2, -3, -31, -7, 4, -43, 2, 4, -7, 2, 0, 1, 0, -3, -24, 2, -26, 8, -39, -37, -6, -9, 4, -4, 2, -21, 9, 15, -5, 12, -17, 5, -6, -8, -39, 4, -10, -18, -17, 6, 25, 9, 3, 3, 6, 8, 2, 3, 16, 6, -22, 10, 6, -13, 14, -6, -23, -5, 0, -8, -2, -6, 7, -4, -4, -12, -25, 8, 12, 6, 0, 5, 0, -17, -2, 4, 6, -6, -24, -5, 10, -4, -21, 5, 6, -9, 5, 11, 4, -12, -6, 3, 12, -3, -47, -5, 6, -17, 1, 35, 3, -20, -3, 2, -6, 20, -12, 8, -8, -2, -20, 8, 1, 3, -29, -9, -4, -33, 7, -4, -11, -32, -9, -15, 2, -14, -40, 1, -25, -29, -35, -42, -12, -31, -12, 4, -78, -31, 0, 15, 0, -13, -12, 3, 10, -5, -30, 7, -14, -6, -3, 0, -9, -14, 3, 11, 6, 2, 2, 3, 8, -7, 26, 11, -8, -4, 8, 15, 2, 8, -5, 4, -10, -1, -16, -1, 7, -8, -25, 21, -2, -1, -8, -7, -26, -12, 4, -9, 8, -5, -7, -5, -3, -7, 0, 8, 3, 9, -3, -6, -1, 0, 0, -8, 8, 0, -9, -1, 20, 22, 35, 38, 26, 11, -5, 11, 1, -6, -5, 4, 4, -3, -4, -5, 9, 31, 29, 27, 0, 42, 8, 2, 48, -1, -4, -5, -1, 7, 17, 1, 1, 7, -11, -3, -1, -25, 9, 1, 8, 20, 4, -5, 3, -12, -29, 3, 14, -17, -30, -35, -8, -2, -5, 5, 4, -19, -2, -7, -5, -1, -3, 7, 1, 7, 5, -9, -13, 6, -6, 9, 28, -14, -8, 3, 6, -12, -10, -2, -2, 1, -17, -11, -6, -1, 4, 4, 8, -13, 3, 5, 9, 5, 10, -3, -9, 6, 3, -10, 3, 27, -5, -8, -11, -24, 5, -7, -5, 5, -17, 3, 26, 3, -7, 3, -10, 15, -16, 1, 15, -22, 1, 0, 12, 10, 3, 5, 20, 13, -9, 17, 3, -14, -6, -2, 6, 8, 16, -4, 2, 11, -31, 10, 2, -8, 25, -3, 9, 10, -2, -6, 24, -17, 6, -1, -1, 1, -4, 16, 2, -1, 29, 31, 0, 12, 5, -3, 0, -23, -10, -17, -6, 13, -8, 7, -20, -18, -36, -22, 0, -29, -1, 3, -21, -56, -14, 3, 9, 1, -34, 1, -22, -37, -40, 5, -16, -41, -16, -4, -51, -29, -2, 4, 1, -1, -8, -7, -2, 2, 3, 7, 7, 3, -2, 9, 25, 9, -8, 3, 0, 0, 20, 2, -7, 2, 9, 5, -9, -22, 1, -7, -30, 52, 1, 1, 13, -11, -2, -6, 9, 12, 27, 12, 0, -21, -9, -2, 0, 14, -6, 0, -4, 11, 16, -9, 32, 9, 11, -10, -4, 17, -18, -1, 4, 9, -1, -3, -2, 4, 25, 6, 6, 4, 29, 27, -6, 25, -1, -6, 26, -19, 6, -2, -3, 12, -6, -7, 27, 14, -12, 11, 9, 7, 0, -3, 13, 9, -4, -4, -3, -8, 14, 0, -18, -6, 29, -4, 8, 10, -9, 2, 9, 7, -2, 3, -3, 4, -27, 3, 14, -5, -9, -9, -17, 10, 6, 8, -10, -5, -15, 4, 8, -10, 15, -5, 18, 9, 23, 9, -25, 6, 20, 13, 8, 35, -6, 3, -1, -5, 8, 6, -6, -5, 0, -21, -5, -3, 5, -1, 21, -9, -9, -3, 1, 0, -8, 4, -2, 2, 16, 48, -22, -3, -13, 3, -18, 9, 7, 9, -5, 8, 9, 4, 4, 13, 31, 3, -24, 22, -10, 4, 47, 1, 2, 7, 2, 8, 19, -2, 18, 5, 15, -17, -7, 16, 3, 3, -9, 21, -6, -9, 0, -11, -21, 8, 14, -2, -1, 7, 18, 3, 1, 3, -3, -7, -3, -7, 14, 8, 12, 1, -5, 4, -17, 22, -1, 9, 9, -1, -4, 9, 5, -8, 1, 2, -28, 3, -32, 8, -21, -4, -2, -19, -9, -9, 3, -28, -15, 6, -3, 5, -20, -10, -9, -53, -17, -1, -22, -42, 4, 3, -41, -33, -3, 8, 6, -6, -15, 7, 5, 15, 27, -19, 1, 6, -4, 4, 12, -21, -9, 6, 13, -1, 10, 12, -15, 7, -4, -2, 12, 41, 7, 8, -4, -8, 8, -2, 3, 2, 10, 7, -5, -23, 14, 20, 8, 3, 3, 10, -20, 7, 0, 4, 4, 2, 24, -1, 11, -14, 40, 33, -1, 35, 4, 2, -7, -9, -9, 2, 7, -3, 42, 8, 13, 17, -15, 9, 23, 34, -20, 4, -9, 0, 5, -6, -1, 8, 13, -4, -5, 7, 8, 2, 0, -4, 11, -3, 3, 4, -5, -2, 12, -1, -4, -6, -2, 1, 16, 44, 8, 0, 2, 2, -1, -12, 8, 4, -2, -4, -19, -12, -12, 11, 10, -4, 18, 8, 0, -5, 1, 2, -3, 3, -3, -2, 27, 4, 22, -13, 12, 28, 6, -10, -1, -5, -3, 3, -12, -9, 1, -5, -12, -4, 6, 8, -12, 5, -6, 6, -21, 11, -3, 22, 6, -1, -2, -5, 10, -4, 2, 18, 21, 36, -13, 39, 2, -6, 2, 9, -3, -4, -1, 7, 4, 0, 11, 5, 59, 52, -6, -6, 13, 7, 0, 8, 6, -6, -1, 17, 54, 1, 18, 7, 11, -22, -16, 10, 3, -6, 18, -1, 2, 5, 3, 2, 27, -2, 17, -9, -25, 5, 6, -29, 5, -8, -10, 19, -6, 5, -4, 6, -60, 1, -10, 2, 13, -48, 1, -17, -10, 2, -20, -12, 0, -6, 3, 11, 0, -4, -14, 5, -35, -34, 7, -33, -1, 6, 12, -33, 1, -6, -3, 4, -6, 9, -1, -19, -40, -57, -19, -32, -17, 4, -59, -3, -5, -7, -6, -9, 15, 3, -4, 12, 19, 1, -5, 17, 6, -6, 16, 28, -4, -7, -8, 5, -14, -7, 3, -14, -37, -36, 4, 4, 6, 2, 31, -4, -8, 0, 7, -7, -17, 5, -16, -4, 41, -6, 6, 8, -3, 18, 7, 19, 8, -6, 6, 9, 15, 4, -4, -3, -13, 13, 11, 22, 7, 7, -28, 17, -13, -15, -8, -6, -2, -3, 6, 12, 7, -18, 9, 34, -3, 6, 6, 6, -7, 0, 12, -7, 6, 6, 9, 9, 11, 20, 4, 21, -6, 14, -14, 6, 4, -5, 3, 1, 13, 4, -12, -3, 37, -21, 11, 4, 6, -2, -19, -15, 1, -5, -3, -11, -9, -6, 3, 11, 26, -16, 6, 11, 5, -3, 5, 2, -10, -8, -10, 6, -5, 6, -6, 1, 1, 1, 8, -23, -15, 2, -23, 8, -3, -4, 7, 1, 12, -13, 11, 2, -32, -6, -3, -7, 9, 7, -24, -8, 0, 2, 5, -5, -8, -2, -7, -1, 23, -23, -7, 19, 1, 11, 4, -11, -3, 2, 9, 8, -21, 9, -3, -16, 2, -14, 8, -7, 11, -14, 2, 7, -13, -10, 10, -1, 2, -3, 6, 3, 7, 2, 0, 10, 13, -2, -15, 13, 8, -9, -2, 10, -15, -2, -21, 6, -31, -3, -5, 2, -1, 5, -28, 2, 0, 1, 0, 0, -28, 10, 0, -7, 8, -10, -7, 7, 9, 10, 11, 13, -3, 11, -4, 5, -9, -7, -33, 5, -30, -18, -24, -16, -8, 16, 3, -21, -6, -2, -4, -5, -26, -14, -30, -23, -48, -39, -23, -22, 10, -10, -39, 3, -2, -4, 2, -2, 0, 3, -10, -10, -3, 4, 19, 14, 6, 11, 38, 2, 1, -4, -4, 3, -14, -3, -13, -16, -31, -19, 12, -13, -11, 10, -15, -1, 7, -6, -6, 1, -5, -4, 6, -13, 12, 9, 13, -2, 8, 0, -16, 0, 2, -6, 8, 4, 59, 7, -10, -12, 45, 12, 3, 16, 10, 7, -11, -5, -4, -1, -3, -1, 27, 7, -2, 22, -23, 14, -4, 24, -7, -12, 59, -22, -4, 17, 15, 9, -35, 4, 29, 12, 7, -1, -2, -14, -7, -1, -15, 17, -10, -5, -2, -11, -2, -7, -1, -4, -25, -6, 9, -6, -1, -12, 14, -42, -8, 2, 1, 5, 5, 0, -9, -7, -16, -25, -11, 28, 3, 0, 3, -4, -2, 5, 3, 10, -15, 4, -9, -11, 9, -1, 16, 0, 10, -17, -5, 8, -5, 1, -5, 6, -38, 1, -2, -7, -12, -3, -5, 5, 1, 9, 5, -2, -1, -7, 4, 7, 4, 5, 24, -7, -1, 36, 7, 3, -17, -7, 19, 5, -2, 0, 6, 0, -16, 1, -1, -10, -11, 19, -8, 11, 0, 5, -14, 14, 10, -9, 15, -4, 26, 1, 5, -6, 28, -1, 4, -15, 8, -16, -7, 5, 0, -1, -5, -5, -17, 9, -6, -8, -8, 11, -2, -7, -2, 6, -10, 7, -2, -3, 3, 10, 6, 5, -15, 8, 3, -5, 1, 20, 4, 16, 4, 31, -2, 1, -2, 7, -29, -1, 1, 23, -28, -16, -4, -14, -8, -9, 47, -25, -7, 5, -12, 1, -18, 2, -29, -28, -56, -44, -40, -40, 3, 4, -64, 10, 4, -6, -7, 0, 1, -2, -12, -12, -6, 13, 3, -13, -6, -4, -10, -4, 8, 1, 6, 1, 17, 9, -5, -10, -14, -6, -3, -15, -3, -7, -39, 36, 7, -14, 10, -4, -19, 3, -6, -24, -1, 30, -19, -3, -3, 4, 13, -15, 11, -3, 15, 3, -19, 6, -12, -6, 12, 13, 14, -11, 16, 1, 22, -1, 3, 0, -1, -9, -3, 3, 4, 7, 7, -3, -2, 3, -10, -2, 24, -1, 10, -10, 5, 2, 2, 3, -5, -19, -34, -12, -3, 10, 17, -6, -16, -13, 13, 3, -7, 4, -10, 6, 0, 4, -48, -33, 4, -10, 5, 5, -9, -2, 0, -2, 6, 3, -15, 10, -3, -2, -42, -27, -4, -21, 10, 15, -1, -6, 14, 7, -1, 4, -30, 16, 6, 2, -22, -3, 3, 10, 1, 0, -22, 3, -4, 2, 10, -3, 5, 10, -4, -7, -18, -2, -8, 3, 1, 3, -16, -11, -8, -8, -2, -8, -25, 12, -16, -6, -11, 3, -1, -8, 3, 9, 23, -13, 2, -10, 7, -1, -3, -6, 1, -5, -21, -37, -8, -14, -5, 13, 2, 2, 4, -2, 2, 1, -15, -1, 5, 3, -1, -12, -2, -2, -10, 2, -6, -6, -1, 0, 6, -4, -16, -1, 0, -5, -21, -5, -2, -13, -8, -2, 8, -23, 6, 8, -7, -9, -1, 1, 12, -1, 6, -8, 15, 10, 11, -4, -32, -6, 1, 10, 4, -7, 2, 5, -6, 35, -26, 26, 0, 3, 4, 2, 57, -19, -14, 17, -4, 1, -45, -5, -33, -3, 3, -35, -3, -27, -12, 4, -27, -38, 13, 14, 11, -3, -4, 6, -1, -4, -5, -18, -2, -13, 7, 6, -15, -14, -12, 0, -9, -7, 4, 5, -15, -3, 26, 19, 10, 25, 4, 10, -8, 5, -7, 2, 9, 1, -1, 9, 20, -18, 24, 11, 1, 17, 4, -5, -7, 12, 7, -3, 5, -3, 20, 1, 7, 3, 5, 22, 10, 50, -14, 3, 20, -1, 14, -11, 0, -2, 23, -2, 9, 5, 36, 22, -21, 26, 7, -1, 35, -6, -5, -3, 4, -2, -10, 10, -10, 6, -1, 5, -15, -35, -4, -9, 9, -9, -6, 1, 2, 4, -12, -7, -4, 0, -5, 6, -8, 1, 4, 0, 8, -7, 17, 1, -5, -10, -5, 0, 0, -2, -4, -2, -10, 17, -6, 1, -6, -15, 5, -4, -5, 3, -9, -1, 10, -10, 14, 12, 0, -3, -5, 0, 1, -13, -4, 4, 4, -5, 13, 0, -11, -1, 8, -18, -3, -2, -6, -11, -20, 2, 11, -17, 1, 6, 38, 8, 11, 12, 39, 10, 9, 14, -8, 2, 0, 16, 3, -6, -6, 17, -10, -2, 2, 0, 26, -4, 9, 25, -6, -12, 16, 20, 11, -1, 6, -4, -7, -5, 0, 4, 13, -3, 5, 13, -8, 1, 30, 15, 9, -3, 6, 3, -15, -1, 8, -1, 10, -3, -2, 6, -3, 8, 6, -9, -7, 14, -1, -4, 0, -12, -16, -6, -13, -6, -7, 22, 11, 2, -7, -22, -2, -3, -2, -2, 39, 7, -2, 35, -7, -4, 7, 22, -17, 3, 37, -26, -1, 17, 9, 7, -24, 0, -9, -16, -13, -16, -21, -5, -5, 2, -34, -12, 17, 12, -1, -6, -12, -8, 18, 11, 15, 8, 13, 0, -1, 2, 19, -8, -3, 8, 8, -13, 21, 10, 6, -5, -3, -8, 7, -23, 11, 8, 2, 9, -6, 0, -1, 8, 11, 10, 20, 23, 51, -10, -9, 21, -10, 10, 4, 7, -10, -3, 2, -3, 1, -4, -12, 11, -9, 18, 17, 18, -5, -2, -11, 21, 6, 10, -3, -7, 12, 9, 10, 13, -6, 4, 2, 22, -5, 12, 17, 16, -6, 3, -9, -11, 3, 1, -11, 4, 2, -10, 8, 6, 6, 2, 32, 20, 8, -10, -1, -1, -18, -7, 4, -8, -7, 13, 5, 8, 16, 5, 12, -4, 3, 3, -2, 8, 19, -2, 17, -10, -14, -7, -3, 18, -1, -1, 8, -2, -5, -18, 7, -10, 10, 2, -2, 8, 5, -2, 9, 23, -10, 0, 13, 6, 4, 2, 2, 6, -36, 3, 3, 16, 15, 16, 3, 18, -5, 11, 2, 1, 3, -10, 9, -10, 7, 0, 19, 3, 18, 13, -12, 36, 10, 11, 6, -1, -11, -7, 7, -5, -15, -5, 10, -3, 18, -5, -3, 11, -19, 11, 11, 32, 0, 3, 7, 12, 10, 6, 19, 13, -8, 5, -13, 7, -13, 8, -7, 1, -2, -1, 3, 5, -7, 9, 7, -2, -21, -43, -6, -12, 6, 7, -9, -15, 14, -7, 12, 11, 12, 6, -8, 9, 24, 5, -2, 15, 8, -7, -14, 6, -9, 8, -6, -14, 19, 15, 30, 16, -15, 28, 1, 10, 10, -9, 68, -15, -8, -15, -13, -9, -23, -6, -20, -4, -33, -7, -5, -31, -13, 3, -23, -9, 10, -3, 0, -2, -9, -2, -9, -3, 37, 16, -1, -22, -8, -7, -6, 4, 10, 0, 9, 8, 3, -3, 12, -1, 4, 79, -2, 23, -6, -7, -6, 6, 13, 7, 1, 1, -13, 5, -10, -4, -30, -22, 9, 2, -7, -3, -10, 54, 1, -7, -11, -3, -7, -5, -4, 3, 10, -9, 1, 2, -3, 1, -8, 14, 1, -10, 5, -7, -12, 0, 2, 10, 1, 13, -3, 22, 12, -8, 15, 7, 2, -8, 4, -13, -1, 10, -2, 6, 2, -11, 1, 7, 3, -2, 5, 21, -10, 3, 12, 8, 14, 5, -15, 5, -37, -44, 21, -22, -12, 2, -1, 5, -1, -2, 6, 3, -21, -2, -15, -19, -17, 0, -16, -27, 3, -2, -28, -24, 5, 12, 5, -7, -17, 6, 4, 0, 10, 17, 10, -5, 11, 2, -4, -12, -13, -4, -2, 9, 5, 7, -8, 4, -29, -15, -1, -18, -14, 6, 0, -12, 8, -7, -4, -3, -36, -3, -6, 2, 7, -3, -10, -5, 0, 5, -17, -9, -2, 5, 1, 0, -19, 10, 8, 6, -18, 15, 5, -17, 0, -1, -33, -9, -4, 2, -7, -9, -24, 15, 0, -16, -7, -20, -3, -20, 15, 5, 24, -4, -15, 8, -6, -4, -11, -1, 11, -5, -12, -2, 0, 5, -9, 6, -7, 0, 5, 7, -5, 7, -9, -6, 1, -14, -12, -18, 3, -9, -1, -3, 1, -28, 5, 8, 10, -8, 25, -5, 24, 19, 5, 3, 0, 31, -10, -8, 17, -15, 13, -5, -12, -5, 10, 1, -29, 19, -8, 6, 5, -34, -2, -4, 9, 8, 11, 0, -9, -10, -12, 7, 22, -3, -16, -5, -2, 21, 10, 8, -32, -7, 7, -1, 0, 1, 13, 8, 18, -12, 4, 0, 1, 0, -8, 7, -20, 4, 0, 8, 12, -1, 1, 7, 10, 3, -9, 20, 10, 40, 3, -7, 30, 23, 7, -18, 5, 4, 12, 2, -11, -11, 12, 33, -1, 9, -8, 8, -4, 7, -5, 0, -8, 0, -3, 8, 15, 5, 3, 2, 3, -1, -1, -6, 7, 18, 5, -8, -3, -3, 21, 1, 22, 11, 1, 15, 0, -17, -5, -5, 14, -2, 6, -1, -2, 3, -5, -3, -15, -9, -37, 9, -5, -15, 12, -3, 3, -47, 3, 4, -3, 8, -26, -10, 12, 6, -33, -11, -6, -24, 8, 6, -52, -16, -6, 5, 9, -8, -22, 9, -12, 1, -40, 22, -3, 8, -5, 6, -3, -33, 6, -18, 6, -1, 1, -8, 13, 2, -12, 0, -2, -9, 3, 2, -8, 1, 2, 8, -10, 11, 36, -4, 5, -2, 16, -17, 11, -17, 10, 7, 10, 3, -10, -4, -1, -3, -3, -7, 9, 9, 10, -7, 13, 6, -8, 2, -17, -4, -5, 4, 6, 5, -1, -6, -1, 6, -1, 38, 2, 18, 5, 4, -12, -13, -7, -7, 4, -10, 48, 10, 8, 3, 1, 16, -2, 10, -4, 3, -9, 5, 3, 0, -4, -10, -20, 1, 4, 13, -47, -11, -8, -10, -9, 12, 23, -12, 8, -3, 12, 1, 10, 6, 34, 43, 0, 13, 16, 16, 4, 2, 44, -11, -1, -4, -4, 1, 12, -4, 6, -8, 6, 23, -1, -4, -7, 3, -16, -15, 4, -5, 0, 1, 30, -12, -7, -8, 26, -10, 17, 13, -2, -7, -13, -2, 17, -5, -1, -11, 36, 5, 19, -5, 42, -8, 11, 35, -25, -2, 9, 16, 9, -9, 4, -2, 35, 5, 1, 6, 28, 32, 2, -18, -2, 7, 21, 37, -2, -4, 8, 1, -21, 5, 10, 7, -3, -4, 6, -1, 6, -1, -26, 11, 1, -13, -9, 4, 30, -8, -3, 22, -3, -20, 4, -16, -10, -6, 6, -20, -7, -7, -1, -3, -14, 12, 19, -9, -25, -61, -12, -11, -4, 12, -24, -23, 8, -5, 5, -2, -11, 7, -6, -11, -18, 5, 5, -33, 14, 4, 0, -8, 3, -7, -3, -5, -5, -6, -12, 5, -3, -2, 4, 9, -11, 3, 19, 8, -1, -3, 4, -7, -15, 7, 3, 8, 5, -8, 3, 13, 3, 19, -19, -11, 7, 12, -3, 11, -6, -4, 3, 1, 2, -19, -8, 15, 0, 5, 37, 0, -3, 4, 16, 3, 6, 7, 10, 4, -2, -6, -7, 29, -14, 4, -11, -6, 0, 4, 5, 4, 17, 9, 0, 9, 3, 6, -3, 25, -8, -9, -15, -4, 7, 1, 0, 7, 11, -6, 9, -2, 37, 7, -8, 2, 5, -11, -14, 18, 8, -13, -8, 3, -1, 7, 1, -4, 36, 22, 8, -12, 11, 7, 21, -4, -3, 13, -1, -2, 0, 14, -6, -12, 4, 0, 1, -23, -4, 8, -10, 16, 5, 6, 1, 8, 40, 3, 37, 28, 76, 23, -1, 45, -20, -4, 26, 47, -5, -4, -16, -2, 34, 15, 10, 20, 49, 16, 5, 13, 11, -12, 13, 2, 3, -7, -5, -11, 15, -8, 1, -16, 60, -1, 7, -7, -2, -6, 4, -20, 8, -13, -16, 9, 22, 3, -16, 0, 12, 15, 19, -6, -8, 7, -29, -7, 17, -11, 2, 2, -15, 14, 16, -1, -4, 3, 16, -2, 5, 1, -6, 1, -13, 0, -6, -4, -3, 1, -13, 4, 23, -24, 3, -25, -5, -6, -6, 3, 0, -17, 5, 11, 9, -4, -20, 1, 0, -45, -4, -15, -7, 6, 2, 9, 1, -12, -5, 7, 9, 0, -12, 3, -34, -10, 0, -48, -5, -6, 17, -24, -1, -6, 0, -4, -40, 9, -11, -21, -51, -36, -18, -30, -1, 8, -52, -34, 7, -11, -4, 3, -8, 3, 2, -6, -5, -3, -15, 20, -3, -6, -21, -6, 2, -5, 15, 5, -22, 9, -1, -4, -23, -6, -10, 11, 0, 7, -28, 9, -2, 3, 4, 12, -30, 3, 1, 7, -14, 3, 7, -3, -5, 3, 7, 12, 4, -3, -10, -4, -4, -1, 2, 4, -30, -33, -5, 2, -4, 6, -24, 2, -9, -6, -8, 2, -20, 3, 3, 22, -19, -8, -8, 7, 6, 5, 3, 0, -3, 8, 8, -1, 7, 4, 0, 0, -18, 7, 13, 1, -3, 6, -11, 2, 7, 2, -4, 0, -28, 3, -12, 7, -32, -7, -10, -14, -2, -3, -18, -5, -12, 8, 3, 7, -6, 5, -17, -23, -4, -24, -3, -14, -13, -5, 14, -28, -5, 1, -8, -1, 74, 6, 58, 34, 87, 60, 5, 57, -14, -9, 22, 46, -2, 3, -15, -3, 41, -8, 1, 23, 24, 26, 6, -14, 2, 1, 28, 19, -3, -3, -3, 3, 3, 1, -5, -9, 12, 13, 11, -4, 9, 2, -7, 10, 1, -1, -6, -1, 8, 2, -11, 0, 12, 5, -2, 8, -14, 0, -17, -3, -3, 1, 0, 0, 25, -5, -4, 5, 44, 6, -11, 5, 6, 4, -16, 0, 2, -7, -6, 6, 19, 12, -9, -10, 50, 15, 5, 17, 6, 8, 5, -4, -10, -5, -12, -3, -2, 3, 20, 4, -18, -16, -16, 3, -11, -4, -5, -24, 11, -1, -2, 3, -14, -1, -8, 10, -36, -40, -5, -41, 12, 4, -7, -15, 2, 0, 1, -2, -17, -2, -10, -11, -35, -29, -14, -9, 11, -10, 4, -7, 8, 6, 5, -6, 2, 7, 9, -11, -13, -3, 2, -19, -10, 2, 18, -5, 10, 1, 7, 2, -26, 6, -13, -5, -18, -12, 5, 24, 2, -13, 4, -7, 0, 4, -2, 0, -3, -1, 7, -6, -10, 3, 3, -12, -3, -2, 11, 1, 2, -2, 2, -8, 12, 13, 2, 9, -7, -12, 0, -3, -1, 22, 15, -1, -1, 3, -1, 0, 13, -4, -13, 8, -15, 16, 4, 17, 0, 10, -5, 22, -2, -4, 8, 0, -21, 8, 7, -10, -9, -8, 7, 10, -5, 5, 0, -9, 4, 7, 12, 7, -16, 5, -2, -23, -3, -2, 7, 1, 4, -8, -6, 17, 8, -14, 6, 2, -29, 0, -9, 3, 2, 1, 5, 3, -6, 2, 23, -15, 13, 11, 11, -13, 86, -1, 58, 19, 70, 60, 5, 63, 1, -4, 35, 81, 1, -7, -11, -12, 94, -3, 28, 20, 89, 55, 16, 51, -1, -12, 57, 64, -3, 1, 1, 6, 58, 1, 11, 10, 93, 32, 7, 33, 14, 3, 31, 43, 17, 1, -1, 9, 45, 5, 19, 19, 74, 28, 5, 30, 14, 7, 24, 55, 7, -5, -1, -7, 15, 5, 9, 7, 38, 16, 4, -1, -9, -5, 10, 14, -9, 3, 0, 15, 25, 6, 10, 14, 27, 12, 3, 5, -2, 1, -15, 10, -7, 4, 7, 6, -1, 11, -7, -2, -11, -6, -5, -7, 2, -4, -3, -2, 6, -13, -4, 5, -4, 2, 5, -8, 14, 30, -3, 6, -10, 6, -6, -5, -7, -6, -2, 6, -5, 9, 2, 4, 28, -21, 4, 0, 6, 10, -23, 8, 11, -1, 8, -1, 25, -2, 18, 3, 19, 7, -9, 16, -6, -1, 5, 9, -10, 0, 12, -4, 32, -4, 23, 4, 35, 3, 1, -7, 0, 7, 9, 20, -3, -7, -5, -4, 21, 0, 3, 15, 29, 19, 3, 5, -7, -4, 20, 4, 4, -8, -5, -1, 16, 1, 9, 6, 13, 17, -3, 23, -1, 5, 11, -5, 6, -1, 4, -1, 25, -10, -5, -13, 12, 4, 7, 6, 13, -4, 5, 9, 0, 7, -4, 0, 7, 14, 10, -8, 9, 4, 7, 4, 10, 6, 4, -3, 5, -1, 5, -4, -6, -9, 8, 1, 6, 5, -1, -15, 6, 8, 7, 8, 5, 4, 6, -2, 14, 14, -1, 3, -9, -18, 10, 9, 4, 4, 6, 0, 11, 17, 5, 22, 86, 0, 46, 33, 63, 81, 6, 89, -11, -13, 41, 79, -9, -4, -12, -8, 67, -6, 33, 30, 33, 80, 1, 24, 4, 10, 23, 57, -1, -6, -4, -3, 58, 16, 17, 18, 77, 70, 10, 23, 6, 5, 15, 27, 0, -7, 1, -2, 41, 8, 9, 25, 53, 32, 2, 28, -4, -6, 30, 49, -6, 9, 4, -6, 32, 1, 3, 23, 53, 22, 1, -5, -2, 6, 8, 18, -7, -3, -2, -9, 34, 17, 10, 10, 2, 34, -1, 10, -2, 2, 4, 2, -6, 12, -1, 0, 9, 1, 4, -4, 32, -7, 9, 0, 1, 12, -8, 0, -5, -2, 2, -1, 6, 5, -7, -8, 2, 1, 3, -11, -2, -3, 8, 3, -5, -4, -6, 8, 6, 1, 10, 6, -6, 14, 3, -10, -4, -6, 0, 21, 8, -2, -2, -11, 24, -1, 10, 6, 29, 19, 4, 4, 14, 0, -11, 14, 0, 6, -4, -4, 14, 11, 7, 6, 50, 15, 9, 14, -3, 4, -24, 8, -1, 0, 0, 3, 6, -4, 10, 1, -17, 13, 0, 12, -3, 2, 3, -1, 0, -20, 1, 2, -13, 13, 3, 3, -9, 19, 2, 6, -5, 6, -9, 12, -16, -6, 1, 5, -12, -2, 0, 3, 36, -16, -8, -10, -15, 2, 3, -1, 0, -6, 11, -3, 11, -5, 2, 3, -9, -1, -8, -12, 4, 1, -5, 8, 5, 9, -2, -1, -4, 2, 10, 9, -22, 5, -3, -1, 0, -4, -10, 2, -5, -1, -1, -7, -9, 11, 4, 19, -12, 8, 12, -3, 9, -5, 9, -8, -3, 0, -3, 0, 98, 13, 62, 24, 100, 46, 39, 71, -4, -9, 65, 58, 11, -4, -17, -1, 46, 1, 21, 12, 72, 55, 11, 16, -3, 12, 26, 51, 12, 6, 0, 0, 34, 1, 10, 14, 49, 48, 0, 41, 5, -12, -11, 45, 7, 13, -18, 8, 50, 16, 15, 6, 62, 62, 6, 18, -10, 11, -2, 19, 1, 3, -7, -13, 35, 0, 10, 11, 43, 38, 5, 9, 0, 7, 20, 40, -1, -6, -12, -5, 33, 0, 7, 12, 29, 26, 6, 9, 18, -5, -2, 17, -4, -2, 11, 7, 23, 5, 3, 8, 41, 0, -5, 10, -5, 14, -2, 1, 0, 3, -9, -2, 24, 10, 2, 2, -1, 22, -3, 14, -1, 6, 9, 14, 0, 9, 3, 2, 26, -4, 5, -3, 28, 2, 5, 8, -14, 8, -10, -7, 0, 1, 1, -1, 13, 2, -1, 11, 12, 17, -2, 16, 2, -3, 8, 10, 3, 6, 8, -8, 14, -2, 17, 6, 15, -2, -1, 13, -10, 3, 5, 13, -3, 2, 5, -6, 2, 12, 5, 8, 18, -12, -2, 3, -6, 2, -3, -18, -8, 1, 4, 5, 2, 11, 3, -1, -6, 5, -5, -6, 5, 0, -8, -3, 1, -5, -2, 1, 28, 1, -8, -14, 22, -4, 7, -3, -1, 8, 0, 25, -3, 9, -1, -3, 4, 3, 2, 7, 14, 13, -1, 2, -16, 2, -2, 26, -5, 8, 0, -7, 13, 4, -4, -1, -30, 10, 2, -5, -13, 10, 1, 1, 3, 0, -4, 2, -22, 1, -9, 4, 9, -17, -2, 13, 3, 6, 9, -5, -1, -6, -3, 1, 109, 5, 60, 35, 118, 82, -4, 95, 4, -17, 51, 57, -10, -1, -9, -16, 65, 3, 26, 22, 53, 24, 13, 3, 2, -4, 10, 27, -1, -3, -7, 3, 35, -6, 14, 6, 51, 36, 11, 6, 11, 0, 40, 4, -4, 11, -13, -9, 51, -9, 9, 27, 68, 43, 3, 14, 2, 9, 13, 18, 2, -2, -13, -7, 58, 5, 11, 3, 21, 31, 2, 8, 1, -2, 12, 20, -3, -1, 5, -4, 21, 1, 7, 11, 15, 13, 5, 12, -3, 3, 8, 16, -6, -4, 3, -6, 18, -2, -8, 9, -3, 3, -4, 18, 1, 6, -12, 15, 2, -9, 6, 7, 9, 4, 7, 11, 5, 12, 3, 4, 6, 6, 6, 1, -10, 2, -11, -10, 17, 4, 19, 16, 2, 18, -5, -5, -9, 11, -16, 20, 2, -8, -1, 5, -1, -5, -3, 1, 11, 7, -2, 13, -1, -9, -10, 23, 3, -15, 5, 6, 27, 11, 11, 6, 23, 23, 1, 5, -2, 9, 39, 4, -5, 6, -8, -4, 26, 11, 7, 9, 23, 23, 3, -3, 13, 4, 16, -7, -3, -6, 16, 4, 0, 7, -7, -3, 10, 7, 6, -2, 4, -11, -5, 1, 5, -5, -5, 3, -19, -7, 10, -6, 15, 11, 10, 21, 11, 5, -17, 3, -4, -4, -1, -5, 0, 0, -1, 0, 12, 28, -2, 5, -9, 5, 15, 5, -9, 3, 8, 2, -12, 0, 8, 2, 11, -13, 12, -17, 3, 6, -4, 14, 5, 9, 8, -1, -9, 5, 10, -11, 4, 30, 5, 5, 0, -10, -9, -3, -1, 6, 1, 0, 85, -5, 59, 46, 127, 72, 20, 93, -1, -3, 59, 76, 0, -11, -4, 0, 43, -7, 19, 2, 49, 52, 9, 10, -11, 4, 21, 31, 0, -4, 1, 4, 50, -11, 16, 11, 37, 29, 7, 14, -4, -9, 2, 11, 6, -14, 1, 4, 51, -1, 13, 22, 24, 12, 17, 9, -4, -5, 32, 10, 11, -6, -10, 6, 42, 0, 15, 4, 25, 18, 7, 26, 1, 0, 8, 18, 8, -1, 2, -4, 31, 6, 12, 6, 10, 22, 12, 15, -6, -1, 1, 0, -2, 6, 9, 3, 8, 6, 3, 6, 30, -9, 2, 14, 10, -3, 17, 1, 7, -2, 1, -8, 16, 2, 8, 11, 8, 14, 11, 8, 15, 6, 8, 15, -18, -4, 12, 3, 19, 5, 6, 13, 21, 5, -9, 0, 7, 5, -3, 4, 0, 0, 10, 0, 11, 14, 8, 7, 22, 13, 15, 13, 8, 5, 9, 14, 6, -2, -6, -9, 13, 18, 10, 4, 7, -4, 5, 2, -6, -5, 6, -11, 12, 8, 4, -4, 9, -1, 7, -2, 8, 9, 7, 3, -6, -1, 16, 19, 7, 10, 3, 2, -1, 10, -5, -2, 20, -7, 4, -16, 8, -1, 2, 30, 7, 4, -11, 7, 4, -1, 5, -9, -40, 6, 1, 3, -14, 4, -24, -20, -3, -10, 5, -1, -2, 3, -12, -3, -34, -4, 0, 11, 13, -3, -6, 8, 2, -1, 3, 12, 5, 6, -2, 6, 26, 4, 7, -8, -4, -4, 3, 10, 12, 5, -4, 3, -30, -9, 8, 0, 48, -12, -3, -8, 2, -4, -4, -29, 9, 4, 1, -3, 95, -2, 63, 39, 53, 84, 49, 49, 8, -13, 52, 58, -7, -9, -16, -16, 33, -2, 20, 11, 41, 34, 10, 11, -5, 16, -43, 39, 12, 3, -5, 0, 48, 6, 30, 8, 31, 21, -1, 26, 6, 0, 41, 3, -2, 2, -12, -12, 34, 14, 15, -8, 44, 22, -5, 25, 2, -5, 0, 13, -6, 7, -2, 17, 31, 1, 13, 6, 32, 6, -1, 6, -7, 9, 2, 4, -4, -10, 1, 5, 1, -12, 7, 13, 35, 4, 3, 8, 12, 4, -27, 6, 4, 1, 6, -2, 13, 13, 0, 17, 5, -8, -6, 0, 1, -5, -19, 13, -5, -2, 0, 6, -4, 9, 9, -4, 22, 10, -5, -2, -12, 7, 5, 3, 9, -7, -3, 3, 18, 7, 0, 4, 19, 6, -6, 5, 1, 9, 9, -7, 1, 6, 2, 4, 9, -3, 7, 6, 21, 11, 3, 22, -4, -8, 34, 0, -3, 5, -5, -10, -7, 8, 3, 4, -6, -8, -3, -9, 11, 5, -2, -15, 6, -3, -3, -8, 10, -3, 1, 0, 14, 17, -1, 10, 1, 8, 3, -11, -6, -9, -11, -10, 7, 8, 0, -5, -32, 7, -8, -15, -2, -5, 0, -27, -3, -7, -5, -3, -16, -4, -2, -7, -23, 8, -11, 6, 17, -1, -17, -9, -3, 13, -4, -9, -14, -4, 2, 12, 19, 13, -3, 11, -7, 7, -5, 3, -9, 7, 10, 14, 0, 6, -5, 1, 25, 20, -1, 6, -4, -10, 0, 20, 16, 8, -2, -4, 21, 9, -4, 16, -1, 27, 10, 4, 10, 0, 2, 6, 5, 1, 5, 6, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 2,6800 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0035753890406340361, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[2] = { 87, -87, };
const TfArray<1, int> tensor_dimension8 = { 1, { 2 } };
const TfArray<1, float> quant8_scale = { 1, { 3.3568496291991323e-05, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,99,65,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0038860882632434368, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,99,65,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0079102786257863045, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,50,33,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0079102786257863045, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,50,33,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0093887671828269958, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,25,17,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0093887671828269958, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,6800 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0093887671828269958, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,2 } };
const TfArray<1, float> quant15_scale = { 1, { 0.29722630977630615, } };
const TfArray<1, int> quant15_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,2 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,5,6 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,2 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,7,8 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 6435, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 13600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 51488, (TfLiteIntArray*)&tensor_dimension9, 6435, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 51480, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 51488, (TfLiteIntArray*)&tensor_dimension11, 13200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 26400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 26400, (TfLiteIntArray*)&tensor_dimension13, 6800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 6800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6800, (TfLiteIntArray*)&tensor_dimension15, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 17;
  for(size_t i = 0; i < 17; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 8; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 8; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 8; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
